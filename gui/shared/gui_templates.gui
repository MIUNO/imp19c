template VerticalScrollBar_Diplomatic
{
	scrollbar = {
		size = { 10 10 }
		wheelstep = 58
		direction = vertical
		
		track = {
			button = {
				gfxtype = buttongfx
				spriteborder = { 10 10 }
				spriteType = Corneredtiled
				effectname = "NoHighlight"
				texture = "gfx/interface/base_parts/scroll_bar_vertical_line_y20bd.dds"
			}
		}
		
		slider = {
			
			button = {
				size = { 10 25 }
				gfxtype = buttongfx
				effectname = "NoHighlight"
			
				background = {
					texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
					shaderfile = "gfx/FX/pdxgui_default.shader"
					spriteType = corneredtiled
					spriteborder = { 6 6 }
					margin_left = 4
					margin_bottom = 4
					alpha = 0.5
				}
				
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = flat_background_white
					spriteType = Corneredtiled
				}
				
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = black_background
					spriteType = Corneredtiled
					block "BlackVisible" { visible = no }
				}
				
				button = {		
					using = red_background
					gfxtype = buttongfx
					alwaystransparent = yes
					size = { 10 25 }
					
					block "On_click_slider" { }
					
					# ToDo: Add Sound. //generic click
					clicksound = "event:/SFX/UI/Generic/2.0/sfx_ui_button_secondary"
					# oversound = " ToDo "
					
					modify_texture = {
						name = "Alpha"
						texture = "gfx/interface/base_parts/button2_outer_x8y8bd_alpha.dds"
						blend_mode = alphamultiply
						spriteType = Corneredtiled
						spriteborder = { 6 6 }
					}
				}
			}					
		}
		
		dec_button = {
			button = {
				block "ScrollBar_offset"
				{				
					size = { 2 2 }
				}
			}
		}
		
		inc_button = {
			button = {
				block "ScrollBar_offset"
				{
					size = { 3 3 }
				}
			}
		}
	}
}
template red_idea_button
{
	using = red_background
	alpha = 0.5
	widget = {
		size = { 100% 100% }
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = portrait_x32y32bd_alpha
			using = beige_background
			alpha = 0.3
			modify_texture = {
				texture = "gfx/interface/base_parts/button_vignette.dds"
				blend_mode = alphamultiply
				spriteType = corneredtiled
				spriteborder = { 20 20 }
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = red_background
			using = portrait_x32y32bd_alpha
			alpha = 2.0
			margin = { -3 -3 }
		}
	}
	icon = {
		name = "question mark"
		alpha = 2.0
		parentanchor = center	
		texture = "gfx/interface/base_parts/idea_mark.dds"
		size = { 36 36 }
	}
}
template background_widget
{
	background = {
		name = "Shadow"
		texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
		shaderfile = "gfx/FX/pdxgui_default.shader"
		spriteType = corneredtiled
		spriteborder = { 8 8 }
		margin = { 4 4 }
		alpha = 0.5
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		using = black_background
		alpha = 0.5
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		using = beige_background
		alpha = 0.5
		modify_texture = {
			texture = "gfx/interface/base_parts/button_vignette.dds"
			blend_mode = alphamultiply
			spriteType = corneredtiled
			spriteborder = { 20 20 }
		}
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		using = black_background
		using = portrait_x32y32bd_alpha
		alpha = 0.5
		margin = { -2 -2 }
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		using = portrait_x32y32bd_alpha
		using = beige_background
		alpha = 0.15
		margin = { -2 -2 }
		modify_texture = {
			texture = "gfx/interface/base_parts/gradient_black_invert.dds"
			blend_mode = alphamultiply
		}
	}
}
template color_background
{
	background = {
		name = "Shadow"
		texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
		shaderfile = "gfx/FX/pdxgui_default.shader"
		spriteType = corneredtiled
		spriteborder = { 8 8 }
		margin = { 3 3 }
		alpha = 0.5
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		block "Color" { using = red_background }
		alpha = 0.5
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		using = portrait_x32y32bd_alpha
		using = beige_background
		alpha = 0.25
		modify_texture = {
			texture = "gfx/interface/base_parts/button_vignette.dds"
			blend_mode = alphamultiply
			spriteType = corneredtiled
			spriteborder = { 20 20 }
		}
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		block "Color" { using = red_background }
		using = top_bar_alpha_x120bd_full
		margin = { -2 -2 }
		alpha = 0.5
	}
}
template image_background
{
	background = {
		name = "Shadow"
		texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
		shaderfile = "gfx/FX/pdxgui_default.shader"
		spriteType = corneredtiled
		spriteborder = { 8 8 }
		margin = { 4 4 }
		alpha = 0.5
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		block "Image" { using = black_background }
		alpha = 0.5
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		using = beige_background
		alpha = 0.5
		modify_texture = {
			texture = "gfx/interface/base_parts/button_vignette.dds"
			blend_mode = alphamultiply
			spriteType = corneredtiled
			spriteborder = { 20 20 }
		}
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		using = black_background
		using = portrait_x32y32bd_alpha
		alpha = 0.5
		margin = { -2 -2 }
	}
	background = {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		using = portrait_x32y32bd_alpha
		using = beige_background
		alpha = 0.15
		margin = { -2 -2 }
		modify_texture = {
			texture = "gfx/interface/base_parts/gradient_black_invert.dds"
			blend_mode = alphamultiply
		}
	}
}

types NEW_GUI {
	type panelka = widget {
		textbox = {
			size = { 100% 24 }
			align = left|bottom
			elide = right
			using = BaseFontM
			using = Default_FontColor
			fontsize_min = 13
			block "TextBox" { text = "none" }
		}
		#textbox = {
		#	size = { 90% 32 }
		#	position = { 0 5 }
		#	margin_left = 10
		#	parentanchor = top|left
		#	maximumsize = { 120 -1 }
		#	block "TextBox" { text = "none" }
		#	autoresize = yes
		#	using = BaseFontM
		#	using = Default_FontColor
		#}
	}
	type panelka_left = widget {
		background = {
			texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			spriteType = corneredtiled
			spriteborder = { 8 8 }
			margin = { 4 4 }
			alpha = 0.25
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			alpha = 0.6
			margin_right = 50%
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_stretch.dds"
				blend_mode = alphamultiply
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = beige_background
			alpha = 0.2
			margin_right = -50%
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_stretch.dds"
				blend_mode = alphamultiply
			}
		}
		icon = {
			size = { 100% 2 }
			position = { 0 100% }
			alpha = 0.5
			using = darken_red_background
		}
		icon = {
			size = { 34 34 }
			block "Icon" { texture = "gfx/interface/icons/shared_icons/leader.dds" }
		}
		margin_widget = {
			size = { 100% 100% }
			margin = { 10 0 }
			textbox = {
				size = { 100% 24 }
				align = right|bottom
				elide = right
				using = BaseFontM
				using = Default_FontColor
				fontsize_min = 13
				block "TextBox" { text = "none" }
			}
		}
	}
	type panelka_right = widget {
		parentanchor = right
		background = {
			texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			spriteType = corneredtiled
			spriteborder = { 8 8 }
			margin = { 4 4 }
			alpha = 0.25
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			alpha = 0.6
			margin_left = 50%
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_stretch_inverted.dds"
				blend_mode = alphamultiply
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = beige_background
			alpha = 0.2
			margin_left = -50%
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_stretch_inverted.dds"
				blend_mode = alphamultiply
			}
		}
		icon = {
			size = { 100% 2 }
			position = { 0 100% }
			alpha = 0.5
			using = darken_red_background
		}
		icon = {
			size = { 34 34 }
			block "Icon" { texture = "gfx/interface/icons/shared_icons/leader.dds" }
		}
		margin_widget = {
			size = { 100% 100% }
			margin = { 10 0 }
			textbox = {
				size = { 100% 24 }
				align = right|bottom
				elide = right
				using = BaseFontM
				using = Default_FontColor
				fontsize_min = 13
				block "TextBox" { text = "none" }
			}
		}
	}
	type panelka_center = widget {
		background = {
			texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			spriteType = corneredtiled
			spriteborder = { 8 8 }
			margin = { 4 4 }
			alpha = 0.25
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = beige_background
			alpha = 0.2
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black_invert.dds"
				blend_mode = alphamultiply
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_black.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 40 0 }
			}
		}
		icon = {
			size = { 100% 2 }
			position = { 0 100% }
			alpha = 0.5
			using = darken_red_background
		}
		icon = {
			size = { 34 34 }
			block "Icon" { texture = "gfx/interface/icons/shared_icons/leader.dds" }
		}
		margin_widget = {
			size = { 100% 100% }
			margin = { 10 0 }
			textbox = {
				size = { 100% 24 }
				align = right|bottom
				elide = right
				using = BaseFontM
				using = Default_FontColor
				fontsize_min = 13
				block "TextBox" { text = "none" }
			}
		}
	}
	type panelka_center_2 = widget {
		background = {
			texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			spriteType = corneredtiled
			spriteborder = { 8 8 }
			margin = { 4 4 }
			alpha = 0.25
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = beige_background
			alpha = 0.2
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black_invert.dds"
				blend_mode = alphamultiply
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_black.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 40 0 }
			}
		}
		icon = {
			size = { 100% 2 }
			position = { 0 100% }
			alpha = 0.5
			using = darken_red_background
		}
		margin_widget = {
			size = { 100% 100% }
			margin = { 10 0 }
			textbox = {
				size = { 100% 24 }
				align = hcenter|bottom
				elide = right
				using = BaseFontM
				using = Default_FontColor
				fontsize_min = 13
				block "TextBox" { text = "none" }
			}
		}
	}
	type panelka_gov = widget {
		icon = {
			size = { 300 32 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			color = { 0 0 0 0.2 }
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		icon = {
			size = { 290 32 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		textbox = {
			size = { 300 }
			multiline = no
			position = { 10 -14 }
			block "Text" { text = "none" }
			fontsize = 18
			elide = right
			using = BaseFontS
			using = Default_FontColor
		}
	}
	type panelka_trade = widget {
		panelka_center = { size = { 270 32 } }
		textbox = {
			name = "Text"
			position = { 272 3 }
			size = { 100 32 }					
			align = left|nobaseline
			elide = right
			using = BaseFontM
			using = Default_FontColor 
			fontsize_min = 14
			block "TextValue"
			{
				
				text = "0"
			}
		}
	}
	type sharp_base_window = window {
		block "Layer" { layer = middle_top }
		
		background = {
			name = "Shadow"
			texture = "gfx/interface/base_parts/shadows/background_x60bd_shadow_hard.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			blend_mode = alphamultiply
			spriteType = Corneredtiled
			spriteborder = { 60 60 }
			alpha = 0.5
			block "Drop_shadow" { visible = yes }			
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			spriteType = Corneredtiled
			block "WindowAlpha" { alpha = 0.95 }
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_hard.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = pattern_black_background
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_hard.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
		icon = {
			name = "background_gradient"
			using = beige_background
			size = { 100% 200 }
			block "GradientAlpha" { alpha = 0.55 }
			block "BackgroundGradient" { visible = yes }
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black.dds"
				blend_mode = alphamultiply
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_hard.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
		icon = {
			name = "background_gradient_sides"
			using = black_background
			size = { 100% 100% }
			alpha = 0.2
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_stretch_sides_black.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 80 40 }
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_hard.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
	}
	type part_sharp_base_window = window {
		block "Layer" { layer = middle_top }
		
		background = {
			name = "Shadow"
			texture = "gfx/interface/base_parts/shadows/background_x60bd_shadow_one_corner.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			blend_mode = alphamultiply
			spriteType = Corneredtiled
			spriteborder = { 60 60 }
			alpha = 0.5
			block "Drop_shadow" { visible = yes }			
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			spriteType = Corneredtiled
			block "WindowAlpha" { alpha = 0.95 }
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_one_corner.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = pattern_black_background
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_one_corner.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
		icon = {
			name = "background_gradient"
			using = beige_background
			size = { 100% 200 }
			block "GradientAlpha" { alpha = 0.55 }
			block "BackgroundGradient" { visible = yes }
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black.dds"
				blend_mode = alphamultiply
				#spriteType = Corneredtiled
				#spriteborder = { 0 120 }
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_one_corner.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
		icon = {
			name = "background_gradient_sides"
			using = black_background
			size = { 100% 100% }
			alpha = 0.2
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_stretch_sides_black.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 80 40 }
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_one_corner.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
	}
	type icon_card_idea = margin_widget {
		block "Size" { size = { 46 46 } }
		
		icon = {
			size = { 100% 100% }
			texture = "[IdeaItem.GetIcon]"
			spriteType = Corneredtiled
			framesize = { 1 1 }
			frame = 1
			alpha = 0.5
		}
		margin_widget = {
			size = { 100% 100% }
			margin = { 2 2 }
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = portrait_x32y32bd_alpha
				using = beige_background
				alpha = 0.3
				modify_texture = {
					texture = "gfx/interface/base_parts/button_vignette.dds"
					blend_mode = alphamultiply
					spriteType = corneredtiled
					spriteborder = { 20 20 }
				}
			}
			background = {
				name = "Shadow"
				texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = corneredtiled
				spriteborder = { 8 8 }
				alpha = 0.5
			}
			button = {
				parentanchor = center
				size = { 36 36 }
				block "Icon" { texture = "gfx/interface/icons/_default.dds" }
			}
		}
	}
	type siege_card = icon {
		block "Size" { size = { 64 60 } }
		using = black_background
		using = portrait_x32y32bd_alpha
		modify_texture = {
			blend_mode = alphamultiply
			texture = "gfx/interface/base_parts/gradient_black_invert.dds"
		}
		margin_widget = {
			margin = { 2 2 }
			size = { 100% 100% }
			vbox = {
				margin_right = 4
				margin_widget = {
					margin_top = -8
					size = { 34 20 }
					icon = {
						size = { 34 34 }
						block "Icon" { texture = "gfx/interface/icons/shared_icons/leader.dds" }
					}
				}
				textbox = {
					name = "Text"
					block "SizeText" {  size = { 60 24 } }				
					align = center|nobaseline
					elide = right
					using = BaseFontS
					using = Default_FontColor
					block "Text" { text = "none" }
					icon = {
						position = { 0 18 }
						texture = "gfx/interface/base_parts/brown_underline_x60bd.dds"
						spriteType = Corneredtiled
						spriteborder = { 30 0 }
						size = { 100% 6 }
						block "LineVisibility"
						{
							
						}
					}
				}
			}
		}
	}
	type siege_card_small = siege_card {
		blockoverride "Size" { size = { 46 60 } }
		blockoverride "SizeText" { size = { 42 24 } }
	}
	type building_parts_item = container {
		datamodel = "[ProvinceWindow.GetPossibleBuildings]"
		ignoreinvisible = yes
	}
	#type build_item_None = building_parts_item {
	#	item = {
	#		building_item_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, 'None')]" }
	#		building_item_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('port_building'))]" }
	#	}
	#}
	type build_item_port = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('port_building'))]"
				blockoverride "Tooltip" { tooltipwidget = building_port_tooltip }
			}
		}
	}
	type build_item_river_port = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('river_port_building'))]"
				blockoverride "Tooltip" { tooltipwidget = building_river_port_tooltip }
			}
		}
	}
	type build_item_school = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('EDU_school'))]"
				blockoverride "Tooltip" { tooltipwidget = building_school_tooltip }
			}
		}
	}
	type build_item_university = building_parts_item {
		item = {
			building_item_button = { 
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('EDU_university'))]"
				blockoverride "Tooltip" { tooltipwidget = building_university_tooltip }
			}
		}
	}
	type build_item_industrial_estate = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('IND_industrial_estate'))]"
				blockoverride "Tooltip" { tooltipwidget = building_industrial_estate_tooltip }
			}
		}
	}
	type build_item_resource_gathering_operation = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('IND_resource_gathering_operation'))]"
				blockoverride "Tooltip" { tooltipwidget = building_resource_gathering_operation_tooltip }
			}
		}
	}
	type build_item_sewer_infrastructure = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('INF_sewer_infrastructure'))]"
				blockoverride "Tooltip" { tooltipwidget = building_sewer_infrastructure_tooltip }
			}
		}
	}
	type build_item_hospital = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('INF_hospital'))]"
				blockoverride "Tooltip" { tooltipwidget = building_hospital_tooltip }
			}
		}
	}
	type build_item_canal = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('INF_canal'))]"
				blockoverride "Tooltip" { tooltipwidget = building_canal_tooltip }
			}
		}
	}
	type build_item_railway_upgrade = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('INF_railway_upgrade'))]" 
				blockoverride "Tooltip" { tooltipwidget = building_railway_upgrade_tooltip }
			}
		}
	}
	type build_item_depot = building_parts_item {
		item = {
			building_item_button = { 
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('INF_depot'))]"
				blockoverride "Tooltip" { tooltipwidget = building_depot_tooltip }
			}
		}
	}
	type build_item_fortress_building = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('fortress_building'))]"
				blockoverride "Tooltip" { tooltipwidget = building_fortress_building_tooltip }
			}
		}
	}
	type build_item_arsenal_building = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('arsenal_building'))]"
				blockoverride "Tooltip" { tooltipwidget = building_arsenal_building_tooltip }
			}
		}
	}
	type build_item_commerce_district = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('URB_commerce_district'))]"
				blockoverride "Tooltip" { tooltipwidget = building_commerce_district_tooltip }
			}
		}
	}
	type build_item_administration_district = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('URB_administration_district'))]"
				blockoverride "Tooltip" { tooltipwidget = building_administration_district_tooltip }
			}
		}
	}
	type build_item_residential_district = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('URB_residential_district'))]"
				blockoverride "Tooltip" { tooltipwidget = building_residential_district_tooltip }
			}
		}
	}
	type build_item_cultural_district = building_parts_item {
		item = {
			building_item_button = {
				visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, Localize('URB_cultural_district'))]"
				blockoverride "Tooltip" { tooltipwidget = building_cultural_district_tooltip }
			}
		}
	}
	type building_box = flowcontainer {
		direction = vertical
		spacing = 8
		flowcontainer = {
			spacing = 8
			flowcontainer = {
				direction = vertical
				spacing = 5
				panelka_center = {
					size = { 100% 32 }
					blockoverride "TextBox" { text = "buildings_ports" }
					blockoverride "Icon" { texture = "gfx/interface/icons/new_icons/color/ports.dds" }
				}
				#tag = {
				#	parentanchor = center
				#	block "TagText" { text = "Ports" }
				#}
				widget = {
					size = { 132 80 }
					flowcontainer = {
						block "PortItems" { }
					}
				}
			}
			flowcontainer = {
				direction = vertical
				spacing = 5
				panelka_center = {
					size = { 100% 32 }
					blockoverride "TextBox" { text = "buildings_education" }
					blockoverride "Icon" { texture = "gfx/interface/icons/new_icons/color/education.dds" }
				}
				flowcontainer = {
					block "EducationItems" { }
				}
			}
			flowcontainer = {
				direction = vertical
				spacing = 5
				panelka_center = {
					size = { 100% 32 }
					blockoverride "TextBox" { text = "buildings_industrial" }
					blockoverride "Icon" { texture = "gfx/interface/icons/new_icons/color/industrialisation.dds" }
				}
				flowcontainer = {
					block "IndustrialItems" { }
				}
			}
		}
		flowcontainer = {
			spacing = 8
			flowcontainer = {
				direction = vertical
				spacing = 5
				panelka_center = {
					size = { 100% 32 }
					blockoverride "TextBox" { text = "buildings_infrastructure" }
					blockoverride "Icon" { texture = "gfx/interface/icons/new_icons/color/infrastructure.dds" }
				}
				flowcontainer = {
					block "InfrastructureItems" { }
				}
			}
		}
		flowcontainer = {
			spacing = 8
			flowcontainer = {
				direction = vertical
				spacing = 5
				panelka_center = {
					size = { 100% 32 }
					blockoverride "TextBox" { text = "buildings_military" }
					blockoverride "Icon" { texture = "gfx/interface/icons/new_icons/color/military.dds" }
				}
				flowcontainer = {
					block "MilitaryItems" { }
				}
			}
			flowcontainer = {
				direction = vertical
				spacing = 5
				panelka_center = {
					size = { 100% 32 }
					blockoverride "TextBox" { text = "buildings_urban_districts" }
					blockoverride "Icon" { texture = "gfx/interface/icons/new_icons/color/urban_districts.dds" }
				}
				flowcontainer = {
					block "UrbanDistrictsItems" { }
				}
			}
		}
	}
	type macro_building_parts_item = container {
		datamodel = "[MacroBuilderView.GetBuildInProvinceModel]"
		ignoreinvisible = yes
	}
	type macro_build_item_port = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('port_building'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_port_tooltip }
			}
		}
	}
	type macro_build_item_river_port = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('river_port_building'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_river_port_tooltip }
			}
		}
	}
	type macro_build_item_school = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('EDU_school'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_school_tooltip }
			}
		}
	}
	type macro_build_item_university = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('EDU_university'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_university_tooltip }
			}
		}
	}
	type macro_build_item_industrial_estate = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('IND_industrial_estate'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_industrial_estate_tooltip }
			}
		}
	}
	type macro_build_item_resource_gathering_operation = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('IND_resource_gathering_operation'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_resource_gathering_operation_tooltip }
			}
		}
	}
	type macro_build_item_sewer_infrastructure = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('INF_sewer_infrastructure'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_sewer_infrastructure_tooltip }
			}
		}
	}
	type macro_build_item_hospital = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('INF_hospital'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_hospital_tooltip }
			}
		}
	}
	type macro_build_item_canal = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('INF_canal'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_canal_tooltip }
			}
		}
	}
	type macro_build_item_railway_upgrade = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('INF_railway_upgrade'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_railway_upgrade_tooltip }
			}
		}
	}
	type macro_build_item_depot = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('INF_depot'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_depot_tooltip }
			}
		}
	}
	type macro_build_item_fortress_building = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('fortress_building'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_fortress_building_tooltip }
			}
		}
	}
	type macro_build_item_arsenal_building = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('arsenal_building'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_arsenal_building_tooltip }
			}
		}
	}
	type macro_build_item_commerce_district = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('URB_commerce_district'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_commerce_district_tooltip }
			}
		}
	}
	type macro_build_item_administration_district = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('URB_administration_district'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_administration_district_tooltip }
			}
		}
	}
	type macro_build_item_residential_district = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('URB_residential_district'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_residential_district_tooltip }
			}
		}
	}
	type macro_build_item_cultural_district = macro_building_parts_item {
		item = {
			macro_building_item_button = {
				visible = "[EqualTo_string(MacroBuilderProvinceBuildable.GetName, Localize('URB_cultural_district'))]"
				blockoverride "Tooltip" { tooltipwidget = macro_building_cultural_district_tooltip }
			}
		}
	}
	type economy_income_item_base = flowcontainer {
		direction = vertical
		alpha = "[TransparentIfTrue( And( EqualTo_int32( EconomyView.GetPlayer.GetNumOfSubjects, '(int32)0' ), IncomeItem.IsTribute ) )]"
		margin = { 2 5 }
		widget = {
			size = { 100% 100% }
			using = background_widget
			blockoverride "Margin" { margin = { 2 2 } }
		}
		flowcontainer = {
			margin_top = 5
			margin_bottom = 2
			widget = {
				size = { 215 38 }
				textbox = {
					size = { 100% 34 }
					margin_left = 10
					align = vcenter
					using = BaseFontS
					using = Default_FontColor
					text = "[IncomeItem.GetName]"
					tooltip = "[IncomeItem.GetTooltip]"
				}
			}
			dynamicgridbox = {
				size = { 90 30 }
				parentanchor = bottom
				datamodel = "[IncomeItem.GetPolicies]"
				flipdirection = yes
				item = {
					policy_button = {
						enabled = "[And(EconomicPolicyGlue.CanClick, Not(And(EqualTo_int32( EconomyView.GetPlayer.GetNumOfSubjects, '(int32)0' ), IncomeItem.IsTribute)))]"
						blockoverride "transparency" {
							alpha = "[TransparentIfTrue( And( EqualTo_int32( EconomyView.GetPlayer.GetNumOfSubjects, '(int32)0' ), IncomeItem.IsTribute ) )]"
						}
						blockoverride "On_click" {
							onclick = "[EconomicPolicyGlue.OnClick]"
						}
						blockoverride "ShowDot" {
							trigger_when = "[EconomicPolicyGlue.IsSelected]"
						} 
						blockoverride "HideDot" {
							trigger_when = "[Not(EconomicPolicyGlue.IsSelected)]"
						}
					}
				}
			}
		}
		flowcontainer = {
			spacing = 5
			margin = { 10 0 }
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = beige_background
				using = portrait_x32y32bd_alpha
				alpha = 0.15
				margin = { -2 0 }
				margin_right = 6
				margin_bottom = 8
			}
			icon_and_text = {
				size = { 140 0 }
				blockoverride "Text" { text = "[IncomeItem.GetValue|2]" }
				blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/treasury.dds" }
			}
			icon_and_text = {
				size = { 140 0 }
				blockoverride "Text" { text = "[IncomeItem.GetModifierValue]" }
				blockoverride "Icon" { texture = "[IncomeItem.GetModifierIcon]" }
				tooltip = "[IncomeItem.GetModifierTooltip]"
			}
		}
	}
	type economy_expense_item_base = flowcontainer {
		direction = vertical
		alpha = "[TransparentIfTrue(Not(ExpenseItem.IsEnabled))]"
		margin = { 2 5 }
		widget = {
			size = { 100% 100% }
			using = background_widget
			blockoverride "Margin" { margin = { 2 2 } }
		}
		flowcontainer = {
			margin_top = 5
			margin_bottom = 2
			widget = {
				size = { 215 38 }
				textbox = {
					size = { 100% 34 }
					margin_left = 10
					align = vcenter
					using = BaseFontS
					using = Default_FontColor
					text = "[ExpenseItem.GetName]"
					tooltip = "[ExpenseItem.GetTooltip]"
				}
			}
			dynamicgridbox = {
				size = { 90 38 }
				parentanchor = bottom
				datamodel = "[ExpenseItem.GetPolicies]"
				flipdirection = yes
				item = {
					policy_button = {
						enabled = "[And(EconomicPolicyGlue.CanClick, ExpenseItem.IsEnabled)]"
						blockoverride "transparency" {
							alpha = "[TransparentIfTrue(Not(ExpenseItem.IsEnabled))]"
						}
						blockoverride "On_click" {
							onclick = "[EconomicPolicyGlue.OnClick]"
						}
						blockoverride "ShowDot" {
							trigger_when = "[EconomicPolicyGlue.IsSelected]"
						} 
						blockoverride "HideDot" {
							trigger_when = "[Not(EconomicPolicyGlue.IsSelected)]"
						}
					}
				}
			}
		}
		flowcontainer = {
			spacing = 5
			margin = { 10 0 }
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = beige_background
				using = portrait_x32y32bd_alpha
				alpha = 0.15
				margin = { -2 0 }
				margin_right = 6
				margin_bottom = 8
			}
			icon_and_text = {
				size = { 140 0 }
				blockoverride "Text" { text = "[ExpenseItem.GetValue|2]" }
				blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/treasury.dds" }
			}
			icon_and_text = {
				size = { 140 0 }
				visible = "[ExpenseItem.HasModifier]"
				blockoverride "Text" { text = "[ExpenseItem.GetModifierValue]" }
				blockoverride "Icon" { texture = "[ExpenseItem.GetModifierIcon]" }
				tooltip = "[ExpenseItem.GetModifierTooltip]"
			}
		}
	}
	type economy_income_item = container {
		datamodel = "[EconomyView.GetIncome]"
		ignoreinvisible = yes
	}
	type economy_expense_item = container {
		datamodel = "[EconomyView.GetExpense]"
		ignoreinvisible = yes
	}
	type item_income_taxes = economy_income_item {
		item = {
			economy_income_item_base = { visible = "[EqualTo_string(IncomeItem.GetName, Localize('INCOMETAX'))]" }
		}
	}
	type item_income_commerce = economy_income_item {
		item = {
			economy_income_item_base = { visible = "[EqualTo_string(IncomeItem.GetName, Localize('INCOMECOMMERCE'))]" }
		}
	}
	type item_income_tributes = economy_income_item {
		item = {
			economy_income_item_base = { visible = "[EqualTo_string(IncomeItem.GetName, Localize('INCOMETRIBUTE'))]" }
		}
	}
	type item_expense_army = economy_expense_item {
		item = {
			economy_expense_item_base = { visible = "[EqualTo_string(ExpenseItem.GetName, Localize('EXPENSEAM'))]" }
		}
	}
	type item_expense_fleet = economy_expense_item {
		item = {
			economy_expense_item_base = { visible = "[EqualTo_string(ExpenseItem.GetName, Localize('EXPENSEFM'))]" }
		}
	}
	type item_expense_tributes = economy_expense_item {
		item = {
			economy_expense_item_base = { visible = "[EqualTo_string(ExpenseItem.GetName, Localize('EXPENSETRIBUTE'))]" }
		}
	}
	type item_expense_forts = economy_expense_item {
		item = {
			economy_expense_item_base = { visible = "[EqualTo_string(ExpenseItem.GetName, Localize('EXPENSEFORT'))]" }
		}
	}
	type item_expense_wages = economy_expense_item {
		item = {
			economy_expense_item_base = { visible = "[EqualTo_string(ExpenseItem.GetName, Localize('EXPENSEWAGES'))]" }
		}
	}
	type diplomatic_category_icon = margin_widget {
		size = { 40 40 }
		direction = vertical
		ignoreinvisible = yes
		margin = { 2 2 }
		background = {
			name = "Shadow"
			texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			spriteType = corneredtiled
			spriteborder = { 8 8 }
			margin = { 4 4 }
			alpha = 0.5
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			block "Color" { using = black_background }
			using = portrait_x32y32bd_alpha
			alpha = 0.5
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = portrait_x32y32bd_alpha
			using = beige_background
			alpha = 0.5
			modify_texture = {
				texture = "gfx/interface/base_parts/button_vignette.dds"
				blend_mode = alphamultiply
				spriteType = corneredtiled
				spriteborder = { 20 20 }
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			block "Color" { using = black_background }
			using = portrait_x32y32bd_alpha
			alpha = 0.5
			margin = { -2 -2 }
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = portrait_x32y32bd_alpha
			using = beige_background
			alpha = 0.15
			margin = { -2 -2 }
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black_invert.dds"
				blend_mode = alphamultiply
			}
		}
	}
	type diplomatic_parts_list = vbox {
		layoutpolicy_horizontal = expanding 
		layoutpolicy_vertical = shrinking
		datamodel = "[DiplomaticView.GetDiplomaticRelations]"
		margin_right = 12
		item = { 
			flowcontainer = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = fixed
				ignoreinvisible = yes
				datamodel = "[RelationTypeItem.GetRelations]"
				margin = { 0 2 }
				block "Content" {

				}
			}
		}
	}
	type base_diplomatic_parts_list = vbox {
		layoutpolicy_horizontal = expanding 
		layoutpolicy_vertical = shrinking
		datamodel = "[DiplomaticView.GetDiplomaticRelations]"
		margin_right = 12
		item = { 
			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = fixed
				ignoreinvisible = yes
				datamodel = "[RelationTypeItem.GetRelations]"
				block "Visible" { }
				margin = { 0 2 }
				diplomatic_category_icon = {
					margin_widget = {
						size = { 36 36 }
						margin = { 2 2 }
						icon = {
							texture = "[RelationTypeItem.AccessIcon]"
							tooltip = "[RelationTypeItem.GetToolTip]"
							size = { 100% 100% }
						}
					}
				}
				overlappingitembox = {
					margin_right = 14
					datamodel = "[RelationTypeItem.GetRelations]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = fixed
					size = { 0 30 }
					spacing = 2
					margin_left = 4
					item = {
						new_country_flag = {
							tooltip = "[RelationDescItem.GetToolTip]"
							datacontext = "[RelationDescItem.GetCountry]"
							blockoverride "Size" { size = { 30 30 } }
							blockoverride "On_click"
							{
								onclick = "[RelationDescItem.OnClick]"
							}
							blockoverride "Flag" {
								texture = "[Country.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
								frame = "[Country.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
								framesize = { 32 32 }
							}
							blockoverride "FlagOverlord" {
								texture = "[Country.GetOverlord.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
								frame = "[Country.GetOverlord.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
								framesize = { 32 32 }
							}
							blockoverride "hover_leave"
							{
								onmousehierarchyleave = "[DiplomaticView.ResetHighlight]"
							}
						}
					}
				}
			}
		}
	}

	type open_list_subjects = widget {
		widget = {
			size = { 18 18 }
			parentanchor = center
			background = {
				name = "Shadow"
				texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = corneredtiled
				spriteborder = { 8 8 }
				margin = { 3 3 }
				alpha = 0.5
			}
		}
		button = {
			size = { 18 18 }
			block "Right" { visible = no }
			parentanchor = center
			using = red_background
			using = portrait_x32y32bd_alpha
			icon = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/arrow_right.dds"
				spriteType = Corneredtiled
				spriteborder = { 0 0 }
				parentanchor = center
			}
			tooltip = "close_list"
		}
		button = {
			size = { 18 18 }
			#block "Down" { visible = no }
			block "Down" { visible = yes }
			parentanchor = center
			using = red_background
			using = portrait_x32y32bd_alpha
			icon = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/arrow.dds"
				spriteType = Corneredtiled
				spriteborder = { 0 0 }
				parentanchor = center
				position = { 1 1 }
			}
			tooltip = "open_list"
		}
	}

	type subjects_diplomatic_item = margin_widget {
		size = { 42 58 }
		margin = { 2 2 }
		icon = {
			size = { 100% 100% }
			using = list_item_vertical
		}
		new_country_flag = {
			tooltip = "[RelationDescItem.GetToolTip]"
			datacontext = "[RelationDescItem.GetCountry]"
			parentanchor = hcenter
			blockoverride "Size" { size = { 30 30 } }
			blockoverride "On_click"
			{
				onclick = "[RelationDescItem.OnClick]"
			}
			blockoverride "hover_leave"
			{
				onmousehierarchyleave = "[DiplomaticView.ResetHighlight]"
			}
		}
		textbox = {
			position = { 0 -4 }
			parentanchor = hcenter|bottom
			using = BaseFontS
			using = Default_FontColor
			text = "[RelationDescItem.GetCountry.GetSubjectLoyalty|0]"
			tooltip = "[RelationDescItem.GetCountry.GetSubjectLoyaltyInfo]"
			autoresize = yes
			align = center|nobaseline
		}
	}

	type offices_color_background = widget {
		size = { 100% 100% }
		background = {
			name = "Shadow"
			texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			spriteType = corneredtiled
			spriteborder = { 8 8 }
			margin = { 4 4 }
			alpha = 0.5
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			alpha = 0.5
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			block "Color" { using = red_color }
			alpha = 0.5
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_stretch_inverted.dds"
				blend_mode = alphamultiply
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black_invert.dds"
				blend_mode = alphamultiply
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			block "Color" { using = red_color }
			using = portrait_x32y32bd_alpha
			alpha = 0.5
			margin = { -2 -2 }
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_stretch_inverted.dds"
				blend_mode = alphamultiply
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black_invert.dds"
				blend_mode = alphamultiply
			}
			modify_texture = {
				block "Pattern" { texture = "gfx/interface/base_parts/pattern_a_l.dds" }
				blend_mode = alphamultiply
				spriteType = corneredtiled
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = portrait_x32y32bd_alpha
			using = beige_background
			alpha = 0.5
			modify_texture = {
				texture = "gfx/interface/base_parts/button_vignette.dds"
				blend_mode = alphamultiply
				spriteType = corneredtiled
				spriteborder = { 20 20 }
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			using = portrait_x32y32bd_alpha
			alpha = 0.5
			margin = { -2 -2 }
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = portrait_x32y32bd_alpha
			using = beige_background
			alpha = 0.15
			margin = { -2 -2 }
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black_invert.dds"
				blend_mode = alphamultiply
			}
		}
	}

	type offices_color_background_widget = widget {
		size = { 32 32 }
		using = color_background
	}

	type laws_widget = flowcontainer {
		datamodel = "[GovernmentView.GetCurrentLaws]"
		ignoreinvisible = yes
		item = {
			margin_widget = {
				size = { 286 42 }
				using = background_widget
				block "visible" { }
				flowcontainer = {
					spacing = 5
					resizeparent = yes
					ignoreinvisible = yes
					margin_widget = {
						size = { 210 222 }
						datamodel = "[LawGroupItem.GetLaws]"
						state = {
							name = "open_law"
							trigger_when = "[GetVariableSystem.Exists(LawGroupItem.GetName)]"
							delay = 0.005
							duration = 0.001
							size = { 210 222 }
						}
						state = {
							name = "close_law"
							trigger_when = "[Not(GetVariableSystem.Exists(LawGroupItem.GetName))]"
							duration = 0.01
							size = { 210 0 }
						}
						state = {
							name = "clear_law"
							on_start =  "[GetVariableSystem.Clear(LawGroupItem.GetName)]"
						}
						item = {
							margin_widget = {
								size = { 210 182 }
								position = { 5 34 }
								visible = "[And(GetVariableSystem.Exists(LawGroupItem.GetName), LawItem.HasLaw)]"
								scrollarea = {
									size = { 100% 100% }
									scrollbarpolicy_horizontal = always_off
									scrollbar_vertical = {
										using = VerticalScrollBar
									}
									
									scrollwidget = {
										flowcontainer = {
											textbox = {
												margin = { 5 5 }
												autoresize = yes
												multiline = yes
												align = left
												using = BaseFontXS
												using = Default_FontColor
												text = "[LawItem.GetLaw.GetModifier.BuildIconSummary]"
												max_width = 200
												fontsize = 14
												elide = right
											}
										}
									}
								}
							}
						}
					}
					flowcontainer = {
						direction = vertical
						#margin_bottom = 5
						margin = { 5 5 }
						margin_top = 32
						datamodel = "[LawGroupItem.GetLaws]"
						item = {
							margin_widget = {
								size = { 240 0 }
								alpha = "[TransparentIfFalse(LawItem.IsAllowed)]"
								state = {
									name = "open_law"
									trigger_when = "[GetVariableSystem.Exists(LawGroupItem.GetName)]"
									delay = 0.005
									duration = 0.001
									size = { 240 46 }
									alpha = 1
								}
								state = {
									name = "close_law"
									trigger_when = "[Not(GetVariableSystem.Exists(LawGroupItem.GetName))]"
									duration = 0.01
									size = { 240 0 }
									alpha = 0
								}
								state = {
									name = "clear_law"
									on_start =  "[GetVariableSystem.Clear(LawGroupItem.GetName)]"
								}
								flowcontainer = {
									parentanchor = vcenter
									margin = { 5 5 }
									spacing = 5
									using = background_widget
									button_radial = {
										enabled = "[And( LawItem.CanEnact, LawItem.IsAllowed )]"
										parentanchor = vcenter
										blockoverride "On_click" 
										{
											onclick = "[LawItem.Enact]"
											inherit_visual_state = no
											enabled = yes
										}
										blockoverride "ShowDot"
										{
											trigger_when = "[LawItem.HasLaw]"
										} 
										blockoverride "HideDot" 
										{
											trigger_when = "[Not(LawItem.HasLaw)]"
										}
										tooltip = "[LawItem.GetCanSetLawDescription]"
									}
									tooltipwidget = player_law_item_tooltip
									widget = {
										size = { 160 26 }
										parentanchor = vcenter
										using = NoninteractableBG
										blockoverride "Margins" { margin = { 4 6 } }
										textbox = {
											position = { 5 3 }
											autoresize = yes
											align = vcenter|left
											using = BaseFontS
											using = Default_FontColor
											text = "[LawItem.GetName]"
											max_width = 150
											fontsize_min = 11
											elide = right
										}
									}
									widget = {
										size = { 32 32 }
										icon = {
											texture = "[LawItem.GetLaw.GetModifier.GetIcon]"
											size = { 32 32 }
										}
									}
								}
							}
						}
					}
				}
				widget = {
					size = { 100% 32 }
					button = {
						size = { 100% 100% }
						onclick = "[GetVariableSystem.Toggle(LawGroupItem.GetName)]"
						using = beige_background
						alpha = 0.15
					}
					widget = {
						size = { 100% 32 }
						alpha = 0.9
						icon = {
							size = { 8 11 }
							position = { 8 0 }
							parentanchor = vcenter
							using = gold_background
							visible = "[GetVariableSystem.Exists(LawGroupItem.GetName)]"
							modify_texture = {
								texture = "gfx/interface/base_parts/arrow_right.dds"
								blend_mode = alphamultiply
							}
						}
						icon = {
							size = { 11 8 }
							position = { 8 0 }
							parentanchor = vcenter
							using = gold_background
							visible = "[Not(GetVariableSystem.Exists(LawGroupItem.GetName))]"
							modify_texture = {
								texture = "gfx/interface/base_parts/arrow.dds"
								blend_mode = alphamultiply
							}
						}
						textbox = {
							position = { 24 0 }
							parentanchor = vcenter				
							autoresize = yes
							using = BaseFontS
							using = Highlight_FontColor
							text = "[LawGroupItem.GetName]"
							max_width = 230
							fontsize_min = 11
							elide = right
						}
						margin_widget = {
							size = { 210 32 }
							parentanchor = vcenter|right
							datamodel = "[LawGroupItem.GetLaws]"
							item = {
								textbox = {
									visible = "[LawItem.HasLaw]"
									position = { -8 0 }
									parentanchor = vcenter|right
									autoresize = yes
									using = BaseFontS
									using = Default_FontColor
									text = "[LawItem.GetName]"
									max_width = 210
									fontsize_min = 11
									elide = right
									alpha = 0.8
								}
							}
						}
						margin_widget = {
							size = { 100% 1 }
							margin = { 5 0 }
							parentanchor = bottom
							icon = {
								size = { 100% 100% }
								using = gold_background
							}
						}
					}
				}
				#text_button_square = {
				#	blockoverride "Center_text" { text = "[LawGroupItem.GetName]" }
				#	blockoverride "On_click" { 
				#		onclick = "[GetVariableSystem.Toggle(LawGroupItem.GetName)]"
				#	}
				#	size = { 100% 32 }
				#}
			}
		}
	}

	type laws_widget_area = flowcontainer {
		direction = vertical
		margin_bottom = 10
		spacing = 5
		sub_header = {
			size = { 465 32 }
		}
		flowcontainer = {
			direction = vertical
			block "laws" { }
		}
	}

	@topbar_left_button_height = 56
	type topbar_left_button = widget {
		size = { 70 @topbar_left_button_height }
		allow_outside = yes
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_stretch_black.dds"
				blend_mode = alphamultiply
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black.dds"
				blend_mode = alphamultiply
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black_invert.dds"
				blend_mode = alphamultiply
			}
		}
		button = {
			gfxtype = buttongfx
			size = { 70 @topbar_left_button_height }
			parentanchor = left
			allow_outside = yes
			#onmousehierarchyenter = "[PdxGuiWidget.FindChild('background').TriggerAnimation('open')]"
			#onmousehierarchyleave = "[PdxGuiWidget.FindChild('background').TriggerAnimation('close')]"
			onmousehierarchyenter = "[PdxGuiWidget.TriggerAnimation('lp_open')]"
			onmousehierarchyenter = "[PdxGuiTriggerAllAnimations('lp_close_full')]"
			onmousehierarchyleave = "[PdxGuiWidget.TriggerAnimation('lp_close')]"
			block "On_click" { }
			block "On_click_Sound" { }
			state = {
				name = lp_open
				duration = 0.2
				delay = 0.001
				on_start = "[PdxGuiWidget.FindChild('text').TriggerAnimation('lp_open')]"
				on_start = "[PdxGuiWidget.FindChild('background').TriggerAnimation('lp_open')]"
				size = { 220 @topbar_left_button_height }
			}
			state = {
				name = lp_close
				delay = 0.1
				duration = 0.2
				on_start = "[PdxGuiWidget.FindChild('text').TriggerAnimation('lp_close')]"
				on_start = "[PdxGuiWidget.FindChild('background').TriggerAnimation('lp_close')]"
				on_finish = "[PdxGuiWidget.FindChild('text').TriggerAnimation('lp_close_full')]"
				on_finish = "[PdxGuiWidget.TriggerAnimation('close_full')]"
				size = { 70 @topbar_left_button_height }
			}
			state = {
				name = lp_close_full
				size = { 70 @topbar_left_button_height }
			}
			widget = {
				name = "background"
				size = { 100% @topbar_left_button_height }
				parentanchor = left
				alpha = 0
				state = {
					name = lp_open
					delay = 0.001
					alpha = 1
				}
				state = {
					name = lp_close
					duration = 0.1
					alpha = 0
				}
				state = {
					name = lp_close_full
					alpha = 0
				}
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = black_background
					modify_texture = {
						texture = "gfx/interface/base_parts/left_topbar.dds"
						blend_mode = alphamultiply
					}
				}
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = beige_background
					alpha = 0.25
					modify_texture = {
						texture = "gfx/interface/base_parts/left_topbar.dds"
						blend_mode = alphamultiply
					}
					modify_texture = {
						texture = "gfx/interface/base_parts/gradient_black_invert.dds"
						blend_mode = alphamultiply
					}
				}
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = beige_background
					margin_right = -75%
					alpha = 0.25
					modify_texture = {
						texture = "gfx/interface/base_parts/horizontal_gradient_stretch_black.dds"
						blend_mode = alphamultiply
					}
				}
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = beige_background
					alpha = 0.5
					modify_texture = {
						texture = "gfx/interface/base_parts/left_topbar.dds"
						blend_mode = alphamultiply
					}
					modify_texture = {
						texture = "gfx/interface/base_parts/horizontal_lines.dds"
						blend_mode = alphamultiply
						spriteType = corneredtiled
						spriteborder = { 2 3 }
					}
				}
				widget = {
					name = "text"
					position = { 80 0 }
					size = { 0 @topbar_left_button_height }
					alpha = 0
					state = {
						name = lp_open
						delay = 0.1
						alpha = 1
						size = { 120 @topbar_left_button_height }
					}
					state = {
						name = lp_close
						duration = 0.1
						alpha = 0
						size = { 0 @topbar_left_button_height }
					}
					state = {
						name = lp_close_full
						alpha = 0
					}
					textbox = {
						size = { 100% 100% }
						elide = right
						block "Text" { text = "none" }
						using = SubHeaderFont
						using = Default_FontColor
						align = left
						fontsize_min = 12
					}
				}
			}
			widget = {
				name = "buttons"
				size = { 68 @topbar_left_button_height }
				position = { 4 0 }
				allow_outside = yes
				icon = {
					size = { 54 54 }
					parentanchor = center
					texture = "gfx/interface/base_parts/round_button_frame_24_shadow.dds"
				}
				button = {
					gfxtype = buttongfx
					size = { 68 @topbar_left_button_height }
					block "Supranational" { onclick = "[GetVariableSystem.Set( 'supranational_window', 'close' )]" }
					block "On_click" { }
					block "On_click_Sound" { }
					block "On_click_additional_1" { }
					block "Details" { }
					tooltip_parentanchor = bottom|right
					button = {
						gfxtype = buttongfx
						size = { 50 50 }
						alpha = 0.5
						parentanchor = center
						using = red_background
						block "Supranational" { onclick = "[GetVariableSystem.Set( 'supranational_window', 'close' )]" }
						block "On_click" { }
						block "On_click_Sound" { }
						block "On_click_additional_1" { }
						modify_texture = {
							texture = "gfx/interface/base_parts/round_button_back_alpha.dds"
							blend_mode = alphamultiply
						}
						icon = {
							size = { 44 44 }
							parentanchor = center
							using = red_background
							modify_texture = {
								texture = "gfx/interface/base_parts/round_button_back_alpha.dds"
								blend_mode = alphamultiply
							}
						}
						icon = {
							size = { 30 30 }
							parentanchor = center
							alpha = 2.0
							using = white_background
							modify_texture = {
								block "Icon" {
									texture = "gfx/interface/icons/menu_buttons/menu_mission.dds"
								}
								blend_mode = alphamultiply
							}
						}
					}
				}
				button = {
					gfxtype = buttongfx
					size = { 68 @topbar_left_button_height }
					block "On_click" { }
					block "On_click_additional_2" { }
					block "Details_toggled" { }
					tooltip_parentanchor = bottom|right
					button = {
						gfxtype = buttongfx
						size = { 50 50 }
						parentanchor = center
						alpha = 0.5
						using = gold_background
						block "On_click" { }
						block "On_click_additional_2" { }
						modify_texture = {
							texture = "gfx/interface/base_parts/round_button_back_alpha.dds"
							blend_mode = alphamultiply
						}
						icon = {
							size = { 44 44 }
							parentanchor = center
							alpha = 2.0
							using = red_background
							modify_texture = {
								texture = "gfx/interface/base_parts/round_button_back_alpha.dds"
								blend_mode = alphamultiply
							}
						}
						icon = {
							size = { 30 30 }
							parentanchor = center
							alpha = 2.0
							using = gold_background
							modify_texture = {
								block "Icon" {
									texture = "gfx/interface/icons/menu_buttons/menu_mission.dds"
								}
								blend_mode = alphamultiply
							}
						}
					}
				}
			}
		}
	}

	type outline_header = margin_widget {
		size = { 100% 38 }
		hbox = {
			background = {
				name = "Shadow"
				texture = "gfx/interface/base_parts/shadows/round_button_right_alpha_x2_shadow.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = corneredtiled
				spriteborder = { 18 17 }
				margin = { 27 -1 }
				alpha = 0.5
			}
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = red_background
				margin = { 26 -2 }
				alpha = 0.5
				modify_texture = {
					texture = "gfx/interface/base_parts/round_button_right_alpha_x2.dds"
					blend_mode = alphamultiply
					spriteType = corneredtiled
					spriteborder = { 18 17 }
				}
			}
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = portrait_x32y32bd_alpha
				texture = "gfx/interface/base_parts/background_noninteractable_texture.dds"
				margin = { 26 -2 }
				alpha = 0.25
				modify_texture = {
					texture = "gfx/interface/base_parts/round_button_right_alpha_x2.dds"
					blend_mode = alphamultiply
					spriteType = corneredtiled
					spriteborder = { 18 17 }
				}
				modify_texture = {
					texture = "gfx/interface/base_parts/button_vignette.dds"
					blend_mode = alphamultiply
					spriteType = corneredtiled
					spriteborder = { 20 32 }
				}
			}
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = red_background
				using = top_bar_alpha_x120bd_full
				margin = { 25 -4 }
				alpha = 0.5
				modify_texture = {
					texture = "gfx/interface/base_parts/round_button_right_alpha_x25.dds"
					blend_mode = alphamultiply
					spriteType = corneredtiled
					spriteborder = { 16 15 }
				}
			}
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = header_ornament
				using = top_bar_alpha_x120bd_full
				margin = { 25 -4 }
				alpha = 0.5
				modify_texture = {
					texture = "gfx/interface/base_parts/round_button_right_alpha_x25.dds"
					blend_mode = alphamultiply
					spriteType = corneredtiled
					spriteborder = { 16 15 }
				}
				modify_texture = {
					texture = "gfx/interface/base_parts/header_s_pattern_x104bd_right_cut3.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
				}
				modify_texture = {
					texture = "gfx/interface/base_parts/horizontal_gradient_black.dds"
					blend_mode = alphamultiply
					spriteType = corneredtiled
					spriteborder = { 40 40 }
				}
				modify_texture = {
					texture = "gfx/interface/base_parts/demanded_filth.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
				}
			}
			widget = {
				name = "Spacing_Widget_1"
				size = { 4 4 }
			}		
			block "TextTitle" {
				textbox = {
					name = "Title" 
					autoresize = yes
					elide = right
					using = SubHeaderFont
					using = Sub_Header_FontColor
					margin_top = 2
					margin_left = 10
					align = top
					block "Title_text" 
					{
						text = "Test Title"
					}
					block "Max_text_width" 
					{
						# Set this too sub_header Size X - 10.
						# If there is an Icon set this to Size X - 50.
						max_width = 300
					}
					#background = {
					#	shaderfile = "gfx/FX/pdxgui_default.shader"
					#	using = portrait_x32y32bd_alpha
					#	texture = "gfx/interface/base_parts/background_noninteractable_texture.dds"
					#	alpha = 0.15
					#	margin = { 1 -1 }
					#	modify_texture = {
					#		texture = "gfx/interface/base_parts/horizontal_gradient_stretch_black.dds"
					#		blend_mode = alphamultiply
					#	}
					#}
				}
			}
			
			widget = {
				name = "Spacing_Widget_2"
				size = { 4 4 }
			}
			
			icon = {
				name = "Ornament"
				size = { 0 32 }
				layoutpolicy_vertical = fixed
				layoutpolicy_horizontal = expanding
			}
			hbox = {
				spacing = 4
				block "White_buttons" {
				}
			}
			widget = {
				size = { 10 8 }
			}
		}
	}
	type outliner_block = container {
		button = {
			size = { 270 30 }
			position = { 37 0 }
			gfxtype = buttongfx
			#onclick = "[OutlinerCategory.ToggleCollapsed]"
			tooltip = "[OutlinerCategory.GetTooltip]"
			alpha = 0.5
			using = tooltip_es
			#using = beige_background
			using = black_background
			#modify_texture = {
			#	blend_mode = alphamultiply
			#	texture = "gfx/interface/base_parts/horizontal_gradient_stretch_inverted.dds"
			#}
			widget = {
				size = { 3 100% }
				alpha = 2.0
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = brighten_red_background
				}
			}
			open_list_subjects = {
				size = { 18 18 }
				parentanchor = vcenter
				position = { 10 0 }
				alpha = 2.0
				blockoverride "Down" {
					#onclick = "[GetVariableSystem.Toggle(OverviewGovernorshipItem.GetGovernorship.GetName)]"
					visible = "[Not(GetVariableSystem.HasValue(OutlinerCategory.GetName, 'hide'))]"
					#onclick = "[GetVariableSystem.Set( OverviewGovernorshipItem.GetGovernorship.GetName, 'yes' )]"
					#visible = "[Or( Not( GetVariableSystem.Exists( OverviewGovernorshipItem.GetGovernorship.GetName ) ), GetVariableSystem.HasValue( OverviewGovernorshipItem.GetGovernorship.GetName, 'no' ) )]"
				}
				blockoverride "Right" {
					#onclick = "[GetVariableSystem.Toggle(OverviewGovernorshipItem.GetGovernorship.GetName)]"
					visible = "[GetVariableSystem.HasValue(OutlinerCategory.GetName, 'hide')]"
					#onclick = "[GetVariableSystem.Set( OverviewGovernorshipItem.GetGovernorship.GetName, 'no' )]"
					#visible = "[GetVariableSystem.HasValue( OverviewGovernorshipItem.GetGovernorship.GetName, 'yes' )]"
				}
			}
			textbox = {
				using = SubHeaderFont
				using = Sub_Header_FontColor
				alpha = 2.0
				fontsize = 16
				text = "[OutlinerCategory.GetName]"
				autoresize = yes
				parentanchor = left
				position = { 35 6 }
			}
			button = {
				size = { 100% 100% }
				onclick = "[OutlinerCategory.ToggleCollapsed]"
				onclick = "[GetVariableSystem.Set(OutlinerCategory.GetName, 'hide')]"
				visible = "[Not(GetVariableSystem.HasValue(OutlinerCategory.GetName, 'hide'))]"
			}
			button = {
				size = { 100% 100% }
				onclick = "[OutlinerCategory.ToggleCollapsed]"
				onclick = "[GetVariableSystem.Set(OutlinerCategory.GetName, 'show')]"
				visible = "[GetVariableSystem.HasValue(OutlinerCategory.GetName, 'hide')]"
			}
			state = {
				name = "show_outliner"
				animation = { position = { 37 0 } }
				bezier = { 0.44 1.11 0.74 0.91 }
				trigger_when = "[GetVariableSystem.HasValue('outliner', 'show')]"
				duration = 0.2
			}
			state = {
				name = "hide_outliner"
				animation = { position = { 65 0 } }
				bezier = { 0.44 0.2 0.74 0.91 }
				trigger_when = "[GetVariableSystem.HasValue('outliner', 'hide')]"
				duration = 0.2
			}
		} 
		dynamicgridbox = {
			name = "item_grid"
			position = { 0 30 }
			
			datamodel = "[OutlinerCategory.GetItems]"
			
			item = {
				block "button" { }
			}
		}
	}
	type outline_button = button {
		size = { 310 40 }
		tooltip = "[OutlinerItem.GetTooltip]"
		onclick = "[OutlinerItem.OnClick]"
		onrightclick = "[OutlinerItem.OnRightClick]"
		using = black_background
		alpha = 0.5
		state = {
			name = "character"
			animation = { size = { 310 70 } }
			trigger_when = "[OutlinerItem.HasCharacter]"
		}
		state = {
			name = "no_character"
			animation = { size = { 310 40 } }
			trigger_when = "[Not(OutlinerItem.HasCharacter)]"
		}
		modify_texture = {
			texture = "gfx/interface/base_parts/round_button_right_alpha_x1.dds"
			blend_mode = alphamultiply
			spriteType = corneredtiled
			spriteborder = { 21 20 }
		}
		background = {
			name = "Shadow"
			texture = "gfx/interface/base_parts/shadows/round_button_right_alpha_x2_shadow.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			spriteType = corneredtiled
			spriteborder = { 18 17 }
			alpha = 0.5
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = portrait_x32y32bd_alpha
			texture = "gfx/interface/base_parts/background_noninteractable_texture.dds"
			margin = { 26 -2 }
			alpha = 0.25
			modify_texture = {
				texture = "gfx/interface/base_parts/round_button_right_alpha_x1.dds"
				blend_mode = alphamultiply
				spriteType = corneredtiled
				spriteborder = { 21 20 }
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/button_vignette.dds"
				blend_mode = alphamultiply
				spriteType = corneredtiled
				spriteborder = { 20 32 }
			}
		}
		widget = {
			size = { 100% 100% }
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = black_background
				margin = { -2 -2 }
				modify_texture = {
					texture = "gfx/interface/base_parts/round_button_right_alpha_x25.dds"
					blend_mode = alphamultiply
					spriteType = corneredtiled
					spriteborder = { 16 15 }
				}
			}
		}
		widget = {
			size = { 20 16 }
			position = { 10 0 }
			parentanchor = left|vcenter
			scissor = yes
			state = {
				name = "show_outliner"
				animation = { size = { 20 16 } }
				bezier = { 0.44 1.11 0.74 0.91 }
				trigger_when = "[GetVariableSystem.HasValue('outliner', 'show')]"
				duration = 0.2
			}
			state = {
				name = "hide_outliner"
				animation = { size = { 30 16 } }
				bezier = { 0.44 0.2 0.74 0.91 }
				trigger_when = "[GetVariableSystem.HasValue('outliner', 'hide')]"
				duration = 0.2
			}
			textbox = {
				size = { 80 16 }
				using = BaseFontS
				fontsize_min = 12
				elide = right
				align = left
				alpha = 2.0
				text = "[OutlinerItem.GetStatus]"
				visible = "[And(OutlinerItem.IsStatusText,Not(OutlinerItem.HasCharacter))]"
			}
		}
		margin_widget = {
			size = { 40 40 }
			margin = { 5 5 }
			alpha = 2.0
			visible = "[Not(OutlinerItem.HasCharacter)]"
			state = {
				name = "show_outliner"
				animation = { position = { 0 0 } }
				bezier = { 0.44 1.11 0.74 0.91 }
				trigger_when = "[GetVariableSystem.HasValue('outliner', 'show')]"
				duration = 0.2
			}
			state = {
				name = "hide_outliner"
				animation = { position = { 30 0 } }
				bezier = { 0.44 0.2 0.74 0.91 }
				trigger_when = "[GetVariableSystem.HasValue('outliner', 'hide')]"
				duration = 0.2
			}

			widget = {
				size = { 100% 100% }
				parentanchor = left|vcenter
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					texture = "gfx/interface/base_parts/round_button_frame_24_shadow.dds"
					margin = { 3 3 }
					alpha = 0.5
				}
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = black_background
					modify_texture = {
						texture = "gfx/interface/base_parts/round_button_back_alpha.dds"
						blend_mode = alphamultiply
					}
				}
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					block "color" { using = red_background }
					alpha = 0.75
					modify_texture = {
						texture = "gfx/interface/base_parts/round_button_back_alpha.dds"
						blend_mode = alphamultiply
					}
				}
				icon = {
					size = { 26 26 }
					parentanchor = center
					block "icon" { texture = "gfx/interface/icons/_default.dds" }
					icon = {
						size = { 18 18 }
						position = { 5 5 }
						parentanchor = bottom|right
						using = white_background
						block "action_icon" {
							visible = no
							modify_texture = {
								texture = "gfx/interface/icons/_default.dds"
								blend_mode = alphamultiply
							}
						}
					}
				}
			}
		}
		textbox = {
			size = { 200 40 }
			position = { 40 0 }
			parentanchor = vcenter
			max_width = 160
			elide = right
			fontsize_min = 10
			using = BaseFontS
			alpha = 2.0
			align = left
			text = "[OutlinerItem.GetText]"
			visible = "[Not( OutlinerItem.HasCharacter )]"
			state = {
				name = "show_outliner"
				animation = { position = { 40 0 } }
				bezier = { 0.44 1.11 0.74 0.91 }
				trigger_when = "[GetVariableSystem.HasValue('outliner', 'show')]"
				duration = 0.2
			}
			state = {
				name = "hide_outliner"
				animation = { position = { 70 0 } }
				bezier = { 0.44 0.2 0.74 0.91 }
				trigger_when = "[GetVariableSystem.HasValue('outliner', 'hide')]"
				duration = 0.2
			}
		}
		textbox = {
			name = "item_text"
			size = { 80 16 }
			position = { -20 0 }
			parentanchor = right|vcenter
			using = BaseFontS
			fontsize_min = 12
			elide = right
			align = right
			alpha = 2.0
			text = "[OutlinerItem.GetStatus]"
			visible = "[And(OutlinerItem.IsStatusText,Not(OutlinerItem.HasCharacter))]"
		}
		widget = {
			ignoreinvisible = yes
			position = { 16 5 }
			alpha = 2.0
			visible = "[OutlinerItem.HasCharacter]"
			flowcontainer = {
				spacing = 5
				ignoreinvisible = yes
				cpt_button = {
					blockoverride "Context" { datacontext = "[OutlinerItem.GetCharacter]" }
					blockoverride "Margin" { margin = { 2 2 } }
					size = { 40 60 }
					blockoverride "portrait_button_template_tooltip" {}
				}
				widget = {
					size = { 1 60 }
					visible = "[GetVariableSystem.HasValue('outliner', 'hide')]"
				}
				flowcontainer = {
					direction = vertical
					margin_top = 2
					spacing = 5
					flowcontainer = {
						textbox = {
							name = "item_status_text"
							visible = "[OutlinerItem.HasCharacter]"
							size = { 150 18 }
							elide = right
							using = BaseFontS
							using = Default_FontColor
							text = "[OutlinerItem.GetText]"
						}
						flowcontainer = {
							spacing = 2
							icon = {
								using = icon_loyalty
								size = { 22 22 }
							}
							textbox = {
								name = "loyalty"
								size = { 48 20 }
								using = BaseFontS
								using = Default_FontColor
								align = right
								elide = right
								autoresize = yes
								text = "[OutlinerItem.GetStatus]"
							}
						}
					}
					flowcontainer = {
						spacing = 5
						flowcontainer = {
							direction = vertical
							spacing = 5
							textbox = {
								using = BaseFontS
								using = Default_FontColor
								autoresize = yes
								maximumsize = { 164 24 }
								elide = right
								align = left
								visible = "[OutlinerItem.GetCharacter.HasActiveAmbition]"
								text = "[OutlinerItem.GetCharacter.GetAmbitionName]"
								widgetanchor = top|left
								fontsize = 12
							}
							fixed_size_progressbar = {
								tooltip = "[OutlinerItem.GetCharacter.GetAmbitionInformation]"
								using = tooltip_below
								blockoverride "size" { size = { 166 7 } }
								blockoverride "Value" 
								{ 
									value = "[FixedPointToFloat( OutlinerItem.GetCharacter.GetAmbitionProgress )]" 
								}
								position = { 6 0 }
								visible = "[And(OutlinerItem.GetCharacter.HasCheckedAmbition, GreaterThan_int32(OutlinerItem.GetCharacter.GetAge, '(int32)15'))]"
							}
						}
						country_flag = {
							datacontext = "[OutlinerItem.GetCharacter.GetEmployer]"
							blockoverride "flag"
							{
								
								texture = "[OutlinerItem.GetCharacter.GetEmployer.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
								frame = "[OutlinerItem.GetCharacter.GetEmployer.AccessCoatOfArms.GetFrame('(int32)120','(int32)120'))]"
								framesize = { 120 120 }
							}
							
							blockoverride "size"
							{
								size = { 26 26 }
							}

							blockoverride "click"
							{
								onclick = "[OpenDiplomacy(OutlinerItem.GetCharacter.GetEmployer)]"
							}
						}
					}
				}
			}
		}
	}

	type diplomatic_play_item = margin_widget {
		size = { 480 210 }
		using = list_item
		flowcontainer = {
			margin = { 5 5 }
			spacing = 5
			flowcontainer = {
				direction = vertical
				using = background_widget
			    new_country_flag = {
			    	parentanchor = hcenter
			        datacontext = "[Scope.GetProvince.MakeScope.GetVariable('play_instigator').GetCountry]"
					blockoverride "Size" { size = { 56 56 } }
					tooltip = "[Scope.GetProvince.MakeScope.GetVariable('play_instigator').GetCountry.GetName]"
					blockoverride "Flag" {
						texture = "[Country.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
						frame = "[Country.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
						framesize = { 56 56 }
					}
					blockoverride "FlagOverlord" {
						texture = "[Country.GetOverlord.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
						frame = "[Country.GetOverlord.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
						framesize = { 56 56 }
					}
			    }
				textbox = {
					size = { 100 67 }
					align = hcenter|top
					using = BaseFontM
					using = Default_FontColor
					multiline = yes
					text = "[Scope.GetProvince.MakeScope.GetVariable('play_instigator').GetCountry.GetName]"
					tooltip = "[Scope.GetProvince.MakeScope.GetVariable('play_instigator').GetCountry.GetName]"
				}
				text_button_square = {
					name = "support_play_side"
					blockoverride "Center_text" { text = "Support" }
					blockoverride "On_click" { 
						#onclick = ""
					}
					tooltip = "Support [Scope.GetProvince.MakeScope.GetVariable('play_instigator').GetCountry.GetName]"
					size = { 90 28 }
					parentanchor = hcenter
					enabled = "yes"
				}
				textbox = {
					size = { 100 20 }
					align = center
					using = BaseFontM
					using = Default_FontColor
					text = "#Y Supporters"
					#tooltip = ""
				}
				overlappingitembox = {
					name = "play_observers_support_instigator"
					datamodel = "[Scope.GetProvince.MakeScope.GetList('play_observers_support_instigator')]"
					size = { 90 30 }
					parentanchor = hcenter
					spacing = 5
					item = {
						new_country_flag = {
					        tooltip = "[Scope.GetCountry.GetName]"
					        datacontext = "[Scope.GetCountry]"
					        blockoverride "Size" { size = { 30 30 } }
							blockoverride "Flag" {
								texture = "[Country.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
								frame = "[Country.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
								framesize = { 32 32 }
							}
							blockoverride "FlagOverlord" {
								texture = "[Country.GetOverlord.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
								frame = "[Country.GetOverlord.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
								framesize = { 32 32 }
							}
					    }
					}
				}
			}
			flowcontainer = {
				direction = vertical
				margin_top = 10
				textbox = {
					size = { 260 40 }
					align = hcenter|top
					using = BaseFontM
					using = Default_FontColor
					multiline = yes
					text = "DIPLO_play_title"
					tooltip = "DIPLO_play_title"
				}
				fixed_size_progressbar = {
					size = { 200 16 }
					parentanchor = hcenter
					blockoverride "Value" { value = "[FixedPointToFloat(Scope.GetProvince.MakeScope.ScriptValue('AI_play_power_balance_instigator_root_percent'))]" }
					tooltip = "Balance of power: [Scope.GetProvince.MakeScope.GetVariable('AI_play_power_balance_instigator_root').GetValue|%0]"
				}
				flowcontainer = {
					direction = vertical
					parentanchor = hcenter
					margin_top = 5
					#spacing = 2
					textbox = {
						size = { 140 20 }
						using = BaseFontM
						using = Default_FontColor
						text = "[Scope.GetProvince.Custom('DIPLO_play_war_willingness')]"
					}
					textbox = {
						size = { 140 20 }
						using = BaseFontM
						using = Default_FontColor
						text = "[Scope.GetProvince.Custom('DIPLO_play_attitude')]"
					}
					textbox = {
						size = { 200 20 }
						using = BaseFontM
						using = Default_FontColor
						text = "Infamy cost for war: #R -[Scope.GetProvince.MakeScope.GetVariable('play_infamy_cost_war').GetValue|0]"
						tooltip = "The international opinion of how justified [Scope.GetProvince.MakeScope.GetVariable('play_instigator').GetCountry.GetName] would be going to war to resolve this play."
					}
					textbox = {
						size = { 200 20 }
						max_width = 200
						using = BaseFontM
						using = Default_FontColor
						text = "Stability cost for war: #R [Scope.GetProvince.MakeScope.GetVariable('play_stability_cost_war').GetValue|0]"
						tooltip = "Public support in [Scope.GetProvince.MakeScope.GetVariable('play_instigator').GetCountry.GetName] to go to war over this play"
					}
				}
				textbox = {
					size = { 260 20 }
					align = center
					using = BaseFontM
					using = Default_FontColor
					text = "#Y Undecided"
					#tooltip = ""
				}
                overlappingitembox = {
                    name = "play_observers_undecided"
                    datacontext = "[Scope.Province]"
                    datamodel = "[Scope.GetProvince.MakeScope.GetList('play_observers_undecided')]"
                    size = { 120 30 }
                    parentanchor = hcenter
                    spacing = 5
                    item = {
                        new_country_flag = {
                            tooltip = "[Scope.GetCountry.GetName]. Support assessment: [GuiScope.SetRoot( Country.MakeScope ).AddScope( 'diplomatic_play', Province.MakeScope ).AddScope( 'assessor_country', Country.MakeScope ).ScriptValue('AI_diplomatic_play_assess_side')|0+=]"
                            datacontext = "[Scope.GetCountry]"
                            blockoverride "Size" { size = { 30 30 } }
							blockoverride "Flag" {
								texture = "[Country.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
								frame = "[Country.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
								framesize = { 32 32 }
							}
							blockoverride "FlagOverlord" {
								texture = "[Country.GetOverlord.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
								frame = "[Country.GetOverlord.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
								framesize = { 32 32 }
							}
                        }
                    }
                }
			}
			flowcontainer = {
				direction = vertical
				using = background_widget
			    new_country_flag = {
			    	parentanchor = hcenter
			        datacontext = "[Scope.GetProvince.MakeScope.GetVariable('play_target_country').GetCountry]"
					blockoverride "Size" { size = { 56 56 } }
					tooltip = "[Scope.GetProvince.MakeScope.GetVariable('play_target_country').GetCountry.GetName]"
					blockoverride "Flag" {
						texture = "[Country.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
						frame = "[Country.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
						framesize = { 56 56 }
					}
					blockoverride "FlagOverlord" {
						texture = "[Country.GetOverlord.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
						frame = "[Country.GetOverlord.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
						framesize = { 56 56 }
					}
			    }
				textbox = {
					size = { 100 67 }
					align = hcenter|top
					using = BaseFontM
					using = Default_FontColor
					multiline = yes
					text = "[Scope.GetProvince.MakeScope.GetVariable('play_target_country').GetCountry.GetName]"
					tooltip = "[Scope.GetProvince.MakeScope.GetVariable('play_target_country').GetCountry.GetName]"
				}
				text_button_square = {
					name = "support_play_side"
					blockoverride "Center_text" { text = "Support" }
					blockoverride "On_click" { 
						#onclick = ""
					}
					tooltip = "Support [Scope.GetProvince.MakeScope.GetVariable('play_target_country').GetCountry.GetName]"
					size = { 90 28 }
					parentanchor = hcenter
					enabled = "yes"
				}
				textbox = {
					size = { 100 20 }
					align = center
					using = BaseFontM
					using = Default_FontColor
					text = "#Y Supporters"
					#tooltip = ""
				}
				overlappingitembox = {
					name = "play_observers_support_target"
					datamodel = "[Scope.GetProvince.MakeScope.GetList('play_observers_support_target')]"
					size = { 90 30 }
					parentanchor = hcenter
					spacing = 5
					item = {
						new_country_flag = {
					        tooltip = "[Scope.GetCountry.GetName]"
					        datacontext = "[Scope.GetCountry]"
					        blockoverride "Size"  { size = { 30 30 } }
							blockoverride "Flag" {
								texture = "[Country.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
								frame = "[Country.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
								framesize = { 32 32 }
							}
							blockoverride "FlagOverlord" {
								texture = "[Country.GetOverlord.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
								frame = "[Country.GetOverlord.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
								framesize = { 32 32 }
							}
					    }
					}
				}
			}
		}
	} 

	type global_powers = margin_widget {
		size = { 420 75 }
		datacontext = "[Scope.GetCountry]"
		state = {
			trigger_when = "[GetVariableSystem.HasValue('supranational_tabs', 'global')]"
			on_start = "[GetScriptedGui('show_player_subjects_button').Execute( GuiScope.SetRoot( Country.MakeScope ).End )]"
		}
		using = list_item
		flowcontainer = {
			margin = { 5 5 }
			spacing = 5
			new_country_flag = {
				parentanchor = vcenter
				blockoverride "Size" { size = { 56 56 } }
				blockoverride "click"
				{
					onclick = "[OpenDiplomacy(Country)]"
				}
				tooltip = "[Country.GetName]: [GuiScope.SetRoot( Scope.Country.MakeScope ).ScriptValue('DIPLOMACY_global_power_score')|0]"
				blockoverride "Flag" {
					texture = "[Country.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
					frame = "[Country.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
					framesize = { 56 56 }
				}
				blockoverride "FlagOverlord" {
					texture = "[Country.GetOverlord.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
					frame = "[Country.GetOverlord.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
					framesize = { 56 56 }
				}
			}
			flowcontainer = {
				direction = vertical
				widget = {
					size = { 300 30 }
					tag_dark = {
						text = "[Country.GetName]"
						tooltip = "[Country.GetDescriptiveName]"
						max_width = 300
						elide = right
					}
				}
				overlappingitembox = {
					size = { 300 30 }
					spacing = 5
					datamodel = "[Country.MakeScope.GetList('player_subjects')]"
					background = {
						shaderfile = "gfx/FX/pdxgui_default.shader"
						using = beige_background
						using = portrait_x32y32bd_alpha
						alpha = 0.15
						margin = { 3 3 }
					}
					item = {
						new_country_flag = {
							tooltip = "COUNTRY_SHORTHAND_INFO"
							datacontext = "[Scope.GetCountry]"
							parentanchor = vcenter
							blockoverride "Size"
							{
								 size = { 30 30 }
							}
							blockoverride "On_Click"
							{
								#onclick = "[OpenDiplomacy(Country.GetCountry)]" #change this
							}
							blockoverride "Flag" {
								texture = "[Country.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
								frame = "[Country.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
								framesize = { 32 32 }
							}
							blockoverride "FlagOverlord" {
								texture = "[Country.GetOverlord.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
								frame = "[Country.GetOverlord.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
								framesize = { 32 32 }
							}
						}
					}
				}
			}
			flowcontainer = {
				direction = vertical
				margin = { 5 5 }
				religion = {
					blockoverride "size" { size = { 32 32 } }
					blockoverride "datacontext" { datacontext = "[Country.GetReligion]" }
					tooltip = "[Country.GetReligion.GetTooltip]"
				}
				widget = {
					size = { 32 25 }
					tag_dark = {
						text = "[GuiScope.SetRoot( Scope.Country.MakeScope ).ScriptValue('DIPLOMACY_global_power_score')|0]"
						tooltip = "[GuiScope.SetRoot( Scope.Country.MakeScope ).ScriptValue('DIPLOMACY_global_power_score')|0]"
						max_width = 32
						elide = right
						parentanchor = hcenter
					}
				}
			}
		}
	}

	type tree_widget = cpt_button {
		blockoverride "ShowIcons" { visible = no }
		size = { 50 76 }
	}
	type tree_widget_arrow = margin_widget {
		size = { 100% 26 }
		margin = { 5 0 }
		parentanchor = hcenter
		icon = {
			size = { 100% 6 }
			using = red_background
			modify_texture = {
				texture = "gfx/interface/missions/arrow_texture.dds"
				blend_mode = alphamultiply
			}
		}
		icon = {
			size = { 26 30 }
			parentanchor = hcenter
			using = red_background
			modify_texture = {
				texture = "gfx/interface/missions/arrow_tip_d.dds"
				blend_mode = alphamultiply
			}
		}
	}
	type tree_block = flowcontainer {
		using = background_widget
		margin = { 5 5 }
	}
	
	type economy_button_check = button {
		size = { 36 36 }
		block "On_click" { }
		widget = {
			size = { 36 36 }
			parentanchor = center
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = gold_background
			}
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = beige_background
				alpha = 0.5
				modify_texture = {
					texture = "gfx/interface/base_parts/button_vignette.dds"
					blend_mode = alphamultiply
					spriteType = corneredtiled
					spriteborder = { 20 20 }
				}
			}
			widget = {
				size = { 32 32 }
				parentanchor = center
				alpha = 0.5
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = black_background
				}
			}
			block "Visible" { }
		}
		icon_button_square = {
			size = { 30 30 }
			parentanchor = center
		}
	}
}
#LessThan_int32 - Меньше
#GreaterThan_int32 - Больше
#Subtract_int32 - Вычтите
#EqualTo_int32 - Равен
#NotEqualTo_int32 - Не равен
#IsEven_int32 - Четное
#LessThanOrEqualTo_int32 - Меньше или равен
#GreaterThanOrEqualTo_int32 - Больше или равен
#GetNumberAbove_int32 - Получите номер выше
#Add_int32 - Прибавить
#Select_int32 - Выбрать
#Multiply_CFixedPoint - Умножение
#[Localize('локализация')]
#кнопки - red_background
#полоски, обводка пунктов списка, разные украшательства - brighten_red_background
#малозначимые украшательства - darken_red_background
#фон всегда - black_background
#обрезание - scissor = yes
#изменение размера родителя - resizeparent = yes