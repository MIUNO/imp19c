template VerticalScrollBar_Diplomatic
{
	scrollbar = {
		size = { 10 10 }
		wheelstep = 58
		direction = vertical
		
		track = {
			button = {
				gfxtype = buttongfx
				spriteborder = { 10 10 }
				spriteType = Corneredtiled
				effectname = "NoHighlight"
				texture = "gfx/interface/base_parts/scroll_bar_vertical_line_y20bd.dds"
			}
		}
		
		slider = {
			
			button = {
				size = { 10 25 }
				gfxtype = buttongfx
				effectname = "NoHighlight"
			
				background = {
					texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
					shaderfile = "gfx/FX/pdxgui_default.shader"
					spriteType = corneredtiled
					spriteborder = { 6 6 }
					margin_left = 4
					margin_bottom = 4
					alpha = 0.5
				}
				
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = flat_background_white
					spriteType = Corneredtiled
				}
				
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					using = black_background
					spriteType = Corneredtiled
					block "BlackVisible" { visible = no }
				}
				
				button = {		
					using = red_background
					gfxtype = buttongfx
					alwaystransparent = yes
					size = { 10 25 }
					
					block "On_click_slider" { }
					
					# ToDo: Add Sound. //generic click
					clicksound = "event:/SFX/UI/Generic/2.0/sfx_ui_button_secondary"
					# oversound = " ToDo "
					
					modify_texture = {
						name = "Alpha"
						texture = "gfx/interface/base_parts/button2_outer_x8y8bd_alpha.dds"
						blend_mode = alphamultiply
						spriteType = Corneredtiled
						spriteborder = { 6 6 }
					}
				}
			}					
		}
		
		dec_button = {
			button = {
				block "ScrollBar_offset"
				{				
					size = { 2 2 }
				}
			}
		}
		
		inc_button = {
			button = {
				block "ScrollBar_offset"
				{
					size = { 3 3 }
				}
			}
		}
	}
}

types NEW_GUI {
	type panelka = icon {
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			margin_right = 50
			color = { 0 0 0 0.2 }
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			margin_right = 40
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		textbox = {
			size = { 90% 32 }
			position = { 0 5 }
			margin_left = 10
			parentanchor = top|left
			maximumsize = { 120 -1 }
			block "TextBox" { text = "none" }
			autoresize = yes
			using = BaseFontM
			using = Black_FontColor
		}
	}
	type panelka_left = icon {
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			margin_right = 40
			color = { 0 0 0 0.2 }
			alpha = 0.4
			modify_texture = {				
				texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			margin_right = 30
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		icon_and_text = {
			position = { 10 0 }
			size = { 90% 32 }
			visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
			blockoverride "Text"
			{
				block "TextBox" { text = "none" }
				fontsize = 18
				using = BaseFontS
				using = Black_FontColor
			}
			block "Tooltip" { tooltip = "none" }
		}
	}
	type panelka_right = icon {
		parentanchor = right
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			margin_left = 40
			color = { 0 0 0 0.2 }
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_s_x104bd_left_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			margin_left = 30
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_s_x104bd_left_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		icon_and_text = {
			position = { -10 0 }
			size = { 90% 32 }
			parentanchor = right
			visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
			blockoverride "Text"
			{
				block "TextBox" { text = "none" }
				fontsize = 18
				using = BaseFontS
				using = Black_FontColor
			}
			block "Tooltip" { tooltip = "none" }
		}
	}
	type panelka_center = icon {
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			margin_right = 15
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_l_x20bd_alpha1.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		icon_and_text = {
			position = { 10 0 }
			size = { 95% 32 }
			visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
			blockoverride "Text"
			{
				block "TextBox" { text = "none" }
				fontsize = 18
				using = BaseFontS
				using = Black_FontColor
			}
			block "Tooltip" { tooltip = "none" }
		}
	}
	type panelka_gov = icon {
		icon = {
			size = { 300 32 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			color = { 0 0 0 0.2 }
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		icon = {
			size = { 290 32 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_s_x104bd_right_cut_alpha.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		textbox = {
			size = { 300 }
			multiline = no
			position = { 10 -14 }
			block "Text" { text = "none" }
			fontsize = 18
			elide = right
			using = BaseFontS
			using = Black_FontColor
		}
	}
	type panelka_trade = icon {
		#block "Size" { size = { 100% 32 } }
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			alpha = 0.4
			modify_texture = {
				texture = "gfx/interface/base_parts/header_l_x20bd_alpha1.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 52 0 }
			}
		}
		icon_and_text = {
			position = { 10 0 }
			size = { 260 32 }
			visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
			blockoverride "Text"
			{
				block "TextBox" { text = "none" }
				fontsize = 18
				using = BaseFontS
				using = Black_FontColor
			}
			block "Tooltip" { }
		}
		textbox = {
			name = "Text"
			position = { 272 3 }
			size = { 100 32 }					
			align = left|nobaseline
			elide = right
			using = BaseFontM
			using = White_FontColor #### using = Black_FontColor
			fontsize_min = 14
			block "TextValue"
			{
				
				text = "0"
			}
		}
	}
	type sharp_base_window = window {
		block "Layer" { layer = middle_top }
		
		background = {
			name = "Shadow"
			texture = "gfx/interface/base_parts/shadows/background_x60bd_shadow_hard.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			blend_mode = alphamultiply
			spriteType = Corneredtiled
			spriteborder = { 60 60 }
			alpha = 0.5
			block "Drop_shadow" { visible = yes }			
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			spriteType = Corneredtiled
			block "WindowAlpha" { alpha = 0.95 }
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_hard.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = pattern_black_background
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_hard.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
		icon = {
			name = "background_gradient"
			#shaderfile = "gfx/FX/pdxgui_default.shader"
			texture = "gfx/interface/base_parts/background_noninteractable_texture.dds"
			spriteType = Corneredtiled
			size = { 100% 200 }
			block "GradientAlpha" { alpha = 0.55 }
			block "BackgroundGradient" { visible = yes }
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black.dds"
				blend_mode = alphamultiply
				#spriteType = Corneredtiled
				#spriteborder = { 0 120 }
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_hard.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
	}
	type part_sharp_base_window = window {
		block "Layer" { layer = middle_top }
		
		background = {
			name = "Shadow"
			texture = "gfx/interface/base_parts/shadows/background_x60bd_shadow_one_corner.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			blend_mode = alphamultiply
			spriteType = Corneredtiled
			spriteborder = { 60 60 }
			alpha = 0.5
			block "Drop_shadow" { visible = yes }			
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = black_background
			spriteType = Corneredtiled
			block "WindowAlpha" { alpha = 0.95 }
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_one_corner.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = pattern_black_background
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_one_corner.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
		icon = {
			name = "background_gradient"
			#shaderfile = "gfx/FX/pdxgui_default.shader"
			texture = "gfx/interface/base_parts/background_noninteractable_texture.dds"
			spriteType = Corneredtiled
			size = { 100% 200 }
			block "GradientAlpha" { alpha = 0.55 }
			block "BackgroundGradient" { visible = yes }
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black.dds"
				blend_mode = alphamultiply
				#spriteType = Corneredtiled
				#spriteborder = { 0 120 }
			}
			modify_texture = {
				texture = "gfx/interface/base_parts/background_x60bd_alpha_one_corner.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 60 }
			}
		}
	}
	type icon_card_idea = margin_widget {
		block "Size" { size = { 46 46 } }
		
		icon = {
			size = { 100% 100% }
			texture = "[IdeaItem.GetIcon]"
			blend_mode = alphamultiply
			spriteType = Corneredtiled
			framesize = { 1 1 }
			frame = 1
			using = portrait_x32y32bd_alpha
		}
		
		margin_widget = {
			size = { 100% 100% }
			margin = { 2 2 }
			margin_widget = {
				size = { 100% 100% }
				icon = {
					size = { 100% 100% }
					using = portrait_x32y32bd_alpha
					texture = "gfx/interface/base_parts/background_noninteractable_texture.dds"
					spriteType = Corneredtiled
					spriteborder = { 100 100 }
					framesize = { 100 100 }
					margin_widget = {
						block "BorderMargin" { margin = { 1 1 } }
						size = { 100% 100% }
						
						margin_widget = {
							size = { 100% 100% }
							background = {
								shaderfile = "gfx/FX/pdxgui_default.shader"
								using = flat_background_white
								using = portrait_x32y32bd_alpha
							}
						}
						
						button = {
							parentanchor = center
							size = { 36 36 }
							block "Icon" { texture = "gfx/interface/icons/_default.dds" }
						}
					}
				}
			}
		}
	}
	type siege_card = icon {
		block "Size" { size = { 64 60 } }
		using = black_background
		using = portrait_x32y32bd_alpha
		modify_texture = {
			blend_mode = alphamultiply
			texture = "gfx/interface/base_parts/gradient_black_invert.dds"
		}
		margin_widget = {
			margin = { 2 2 }
			size = { 100% 100% }
			vbox = {
				margin_right = 4
				margin_widget = {
					margin_top = -8
					size = { 34 20 }
					icon = {
						size = { 34 34 }
						block "Icon" { texture = "gfx/interface/icons/shared_icons/leader.dds" }
					}
				}
				textbox = {
					name = "Text"
					block "SizeText" {  size = { 60 24 } }				
					align = center|nobaseline
					elide = right
					using = BaseFontS
					using = White_FontColor
					block "Text" { text = "none" }
					icon = {
						position = { 0 18 }
						texture = "gfx/interface/base_parts/brown_underline_x60bd.dds"
						spriteType = Corneredtiled
						spriteborder = { 30 0 }
						size = { 100% 6 }
						block "LineVisibility"
						{
							
						}
					}
				}
			}
		}
	}
	type siege_card_small = siege_card {
		blockoverride "Size" { size = { 46 60 } }
		blockoverride "SizeText" { size = { 42 24 } }
	}
	type building_button = building_item_button {
		blockoverride "On_click" { 
			onclick = "[BuildingItem.Build]" 
			#enabled = "[Or( BuildingItem.CanBuild, BuildingItem.HasQueue )]"
			onrightclick = "[BuildingItem.CancelOrDestroy]"
		}
		blockoverride "Text" { text = "[BuildingItem.GetLevel]" }
		blockoverride "ExtraText" 
		{
			visible = "[BuildingItem.HasQueue]"
			text = "+[BuildingItem.GetQueueSize]"
		}
		blockoverride "Tooltip" {
			text = "Awooga!"
		}
	}
	type building_parts_item = container {
		datamodel = "[ProvinceWindow.GetPossibleBuildings]"
		ignoreinvisible = yes
	}
	#type build_item_None = building_parts_item {
	#	item = {
	#		building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, 'None')]" }
	#		building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','port_building'))]" }
	#	}
	#}
	type build_item_port = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','port_building'))]" }
		}
	}
	type build_item_river_port = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','river_port_building'))]" }
		}
	}
	type build_item_school = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','EDU_school'))]" }
		}
	}
	type build_item_university = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','EDU_university'))]" }
		}
	}
	type build_item_industrial_estate = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','IND_industrial_estate'))]" }
		}
	}
	type build_item_resource_gathering_operation = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','IND_resource_gathering_operation'))]" }
		}
	}
	type build_item_sewer_infrastructure = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','INF_sewer_infrastructure'))]" }
		}
	}
	type build_item_hospital = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','INF_hospital'))]" }
		}
	}
	type build_item_canal = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','INF_canal'))]" }
		}
	}
	type build_item_railway_upgrade = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','INF_railway_upgrade'))]" }
		}
	}
	type build_item_depot = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','INF_depot'))]" }
		}
	}
	type build_item_fortress_building = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','fortress_building'))]" }
		}
	}
	type build_item_arsenal_building = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','arsenal_building'))]" }
		}
	}
	type build_item_commerce_district = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','URB_commerce_district'))]" }
		}
	}
	type build_item_administration_district = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','URB_administration_district'))]" }
		}
	}
	type build_item_residential_district = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','URB_residential_district'))]" }
		}
	}
	type build_item_cultural_district = building_parts_item {
		item = {
			building_button = { visible = "[EqualTo_string(BuildingItem.GetBuilding.GetNameWithNoTooltip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','URB_cultural_district'))]" }
		}
	}
	type building_box = flowcontainer {
		direction = vertical
		spacing = 8
		flowcontainer = {
			spacing = 8
			flowcontainer = {
				direction = vertical
				tag = {
					parentanchor = center
					block "TagText" { text = "Ports" }
				}
				widget = {
					size = { 110 80 }
					flowcontainer = {
						block "PortItems" { }
					}
				}
			}
			flowcontainer = {
				direction = vertical
				tag = {
					parentanchor = center
					block "TagText" { text = "Education" }
				}
				flowcontainer = {
					block "EducationItems" { }
				}
			}
			flowcontainer = {
				direction = vertical
				tag = {
					parentanchor = center
					block "TagText" { text = "Industrial" }
				}
				flowcontainer = {
					block "IndustrialItems" { }
				}
			}
		}
		flowcontainer = {
			spacing = 8
			flowcontainer = {
				direction = vertical
				tag = {
					parentanchor = center
					block "TagText" { text = "Infrastructure" }
				}
				flowcontainer = {
					block "InfrastructureItems" { }
				}
			}
		}
		flowcontainer = {
			spacing = 8
			flowcontainer = {
				direction = vertical
				tag = {
					parentanchor = center
					block "TagText" { text = "Military" }
				}
				flowcontainer = {
					block "MilitaryItems" { }
				}
			}
			flowcontainer = {
				direction = vertical
				tag = {
					parentanchor = center
					block "TagText" { text = "Urban Districts" }
				}
				flowcontainer = {
					block "UrbanDistrictsItems" { }
				}
			}
		}
	}
	type economy_income_item = widget {
		size = { 270 72 }
		scrollarea = {
			size = { 100% 100% }
			scrollbarpolicy_horizontal = always_off
			scrollbarpolicy_vertical = always_off
			scrollwidget = {
				dynamicgridbox = {
					block "ItemPosition" { position = { 0 0 } }
					datamodel_wrap = 1
					datamodel = "[EconomyView.GetIncome]"
					item = {
						flowcontainer = {
							direction = vertical
							alpha = "[TransparentIfTrue( And( EqualTo_int32( EconomyView.GetPlayer.GetNumOfSubjects, '(int32)0' ), IncomeItem.IsTribute ) )]"
							margin = { 5 5 }
							background = {
								shaderfile = "gfx/FX/pdxgui_default.shader"
								using = black_background
								using = portrait_x32y32bd_alpha
							}
							flowcontainer = {
								widget = {
									size = { 170 30 }
									textbox = {
										size = { 100% 25 }
										margin_left = 10
										align = vcenter
										using = BaseFontS
										using = Black_FontColor
										text = "[IncomeItem.GetName]"
										tooltip = "[IncomeItem.GetTooltip]"
									}
								}
								dynamicgridbox = {
									size = { 90 30 }
									datamodel = "[IncomeItem.GetPolicies]"
									flipdirection = yes
									item = {
										widget = {
											size = { 30 30 }
											policy_button = {
												enabled = "[And(EconomicPolicyGlue.CanClick, Not(And(EqualTo_int32( EconomyView.GetPlayer.GetNumOfSubjects, '(int32)0' ), IncomeItem.IsTribute)))]"
												blockoverride "transparency" {
													alpha = "[TransparentIfTrue( And( EqualTo_int32( EconomyView.GetPlayer.GetNumOfSubjects, '(int32)0' ), IncomeItem.IsTribute ) )]"
												}
											}
										}
									}
								}
							}
							flowcontainer = {
								background = {
									shaderfile = "gfx/FX/pdxgui_default.shader"
									texture = "gfx/interface/base_parts/base_color.dds"
									using = portrait_x32y32bd_alpha
									alpha = 0.04
									margin = { 3 0 }
									margin_bottom = 3
								}
								icon_and_text = {
									size = { 130 0 }
									blockoverride "Text" { text = "[IncomeItem.GetValue|2]" }
									blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/treasury.dds" }
								}
								icon_and_text = {
									size = { 130 0 }
									blockoverride "Text" { text = "[IncomeItem.GetModifierValue]" }
									blockoverride "Icon" { texture = "[IncomeItem.GetModifierIcon]" }
									tooltip = "[IncomeItem.GetModifierTooltip]"
								}
							}
						}
					}
				}
			}
		}
	}
	type economy_expense_item = widget {
		size = { 270 72 }
		scrollarea = {
			size = { 100% 100% }
			scrollbarpolicy_horizontal = always_off
			scrollbarpolicy_vertical = always_off
			scrollwidget = {
				dynamicgridbox = {
					block "ItemPosition" { position = { 0 0 } }
					datamodel_wrap = 1
					datamodel = "[EconomyView.GetExpense]"
					item = {
						flowcontainer = {
							direction = vertical
							alpha = "[TransparentIfTrue(Not(ExpenseItem.IsEnabled))]"
							margin = { 5 5 }
							background = {
								shaderfile = "gfx/FX/pdxgui_default.shader"
								using = black_background
								using = portrait_x32y32bd_alpha
							}
							flowcontainer = {
								widget = {
									size = { 170 30 }
									textbox = {
										size = { 100% 25 }
										margin_left = 10
										align = vcenter
										using = BaseFontS
										using = Black_FontColor
										text = "[ExpenseItem.GetName]"
										tooltip = "[ExpenseItem.GetTooltip]"
									}
								}
								dynamicgridbox = {
									size = { 90 30 }
									datamodel = "[ExpenseItem.GetPolicies]"
									flipdirection = yes
									item = {
										widget = {
											size = { 30 30 }
											policy_button = {
												enabled = "[And(EconomicPolicyGlue.CanClick, ExpenseItem.IsEnabled)]"
												blockoverride "transparency" {
													alpha = "[TransparentIfTrue(Not(ExpenseItem.IsEnabled))]"
												}
											}
										}
									}
								}
							}
							flowcontainer = {
								background = {
									shaderfile = "gfx/FX/pdxgui_default.shader"
									texture = "gfx/interface/base_parts/base_color.dds"
									using = portrait_x32y32bd_alpha
									alpha = 0.04
									margin = { 3 0 }
									margin_bottom = 3
								}
								icon_and_text = {
									size = { 130 0 }
									blockoverride "Text" { text = "[ExpenseItem.GetValue|2]" }
									blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/treasury.dds" }
								}
								icon_and_text = {
									size = { 130 0 }
									visible = "[ExpenseItem.HasModifier]"
									blockoverride "Text" { text = "[ExpenseItem.GetModifierValue]" }
									blockoverride "Icon" { texture = "[ExpenseItem.GetModifierIcon]" }
									tooltip = "[ExpenseItem.GetModifierTooltip]"
								}
							}
						}
					}
				}
			}
		}
	}
	type item_income_1 = economy_income_item {
		blockoverride "ItemPosition" { position = { 0 0 } }
	}
	type item_income_2 = economy_income_item {
		blockoverride "ItemPosition" { position = { -270 0 } }
	}
	type item_income_3 = economy_income_item {
		blockoverride "ItemPosition" { position = { -540 0 } }
	}
	type item_expense_1 = economy_expense_item {
		blockoverride "ItemPosition" { position = { 0 0 } }
	}
	type item_expense_2 = economy_expense_item {
		blockoverride "ItemPosition" { position = { -270 0 } }
	}
	type item_expense_3 = economy_expense_item {
		blockoverride "ItemPosition" { position = { -540 0 } }
	}
	type item_expense_4 = economy_expense_item {
		blockoverride "ItemPosition" { position = { -810 0 } }
	}
	type item_expense_5 = economy_expense_item {
		blockoverride "ItemPosition" { position = { -1080 0 } }
	}
	type diplomatic_parts_list = vbox {
		layoutpolicy_horizontal = expanding 
		layoutpolicy_vertical = shrinking
		block "datamodel_1" { datamodel = "[DiplomaticView.GetDiplomaticRelations]" }
		margin_right = 12
		#margin_bottom = 4
		item = { 
			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = fixed
				ignoreinvisible = yes
				block "datamodel_2" { datamodel = "[RelationTypeItem.GetRelations]" }
				block "Content" {

				}
			}
		}
	}
	type open_list_subjects = widget {
		button = {
			size = { 18 18 }
			parentanchor = center
			background = {
				name = "Shadow"
				texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = corneredtiled
				spriteborder = { 8 8 }
				margin = { 3 3 }
				alpha = 0.5
			}
		}
		button = {
			size = { 18 18 }
			block "Right" { visible = no }
			parentanchor = center
			using = red_background
			using = portrait_x32y32bd_alpha
			icon = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/arrow_right.dds"
				spriteType = Corneredtiled
				spriteborder = { 0 0 }
				parentanchor = center
			}
			tooltip = "close_list_subjects"
		}
		button = {
			size = { 18 18 }
			#block "Down" { visible = no }
			block "Down" { visible = yes }
			parentanchor = center
			using = red_background
			using = portrait_x32y32bd_alpha
			icon = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/arrow.dds"
				spriteType = Corneredtiled
				spriteborder = { 0 0 }
				parentanchor = center
				position = { 1 1 }
			}
			tooltip = "open_list_subjects"
		}
	}
	type subjects_diplomatic_item = margin_widget {
		size = { 42 58 }
		margin = { 2 2 }
		icon = {
			size = { 100% 100% }
			using = list_item_vertical
		}
		country_flag = {
			tooltip = "[RelationDescItem.GetToolTip]"
			datacontext = "[RelationDescItem.GetCountry]"
			parentanchor = hcenter
			#visible = "[EqualTo_string(RelationDescItem.GetToolTip, SelectLocalization(GetVariableSystem.HasValue('province_tabs', 'buildings'),'none','client_state'))]"
			blockoverride "flag"
			{
				texture = "[RelationDescItem.AccessFlagIcon]"
				frame = "[RelationDescItem.GetFlagFrame]"
				framesize = { 56 56 }
			}
		
			blockoverride "size"
			{
				size = { 30 30 }
			}
		
			blockoverride "click"
			{
				onclick = "[RelationDescItem.OnClick]"
			}
		
			blockoverride "hover_leave"
			{
				onmousehierarchyleave = "[DiplomaticView.ResetHighlight]"
			}
		}
		textbox = {
			position = { 0 -4 }
			parentanchor = hcenter|bottom
			using = BaseFontS
			using = White_FontColor
			text = "[RelationDescItem.GetCountry.GetSubjectLoyalty|0]"
			tooltip = "[RelationDescItem.GetCountry.GetSubjectLoyaltyInfo]"
			autoresize = yes
			align = center|nobaseline
		}
	}
	type diplomatic_category_icon = flowcontainer {
		direction = vertical
		ignoreinvisible = yes
		margin = { 2 2 }
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			block "Color" { using = black_background }
			using = portrait_x32y32bd_alpha
			alpha = 0.5
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = portrait_x32y32bd_alpha
			texture = "gfx/interface/base_parts/background_noninteractable_texture.dds"
			alpha = 0.5
			modify_texture = {
				texture = "gfx/interface/base_parts/horizontal_gradient_stretch_black.dds"
				blend_mode = alphamultiply
			}
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			block "Color" { using = black_background }
			using = portrait_x32y32bd_alpha
			alpha = 0.5
			margin = { -2 -2 }
		}
		background = {
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = portrait_x32y32bd_alpha
			texture = "gfx/interface/base_parts/background_noninteractable_texture.dds"
			alpha = 0.15
			margin = { -2 -2 }
			modify_texture = {
				texture = "gfx/interface/base_parts/gradient_black_invert.dds"
				blend_mode = alphamultiply
			}
		}
		block "Content" { }
	}
}
#LessThan_int32 - Меньше
#GreaterThan_int3 - Больше
#Subtract_int32 - Вычтите
#EqualTo_int32 - Равен
#IsEven_int32 - Четное
#LessThanOrEqualTo_int32 - Меньше или равен
#GreaterThanOrEqualTo_int32 - Больше или равен
#GetNumberAbove_int32 - Получите номер выше
#Add_int32 - Прибавить
#Select_int32 - Выбрать
#[SelectLocalization(условие,'true','false')]

#кнопки - red_background
#полоски, обводка пунктов списка, разные украшательства - brighten_red_background
#малозначимые украшательства - darken_red_background
#фон всегда - black_background