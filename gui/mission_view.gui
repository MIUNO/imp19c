template ArrowLine
{
	gfxtype = linegfx
	width = 10
	
	animation_speed = { 0.15 0 }
	uv_scale = { 1.0 1.0 }
	texture = "gfx/interface/missions/arrow_texture.dds"
	mask_uv_scale = { 1.0 1.0 }
	mask = "gfx/interface/missions/arrow_alpha.dds"
}
@iconbuttonwidth = 128
@iconbuttonheight = 58
@window_width = 860
@window_height = 900

base_window = {
	name = "mission_view"
	size = { @window_width @window_height }
	using = main_window_template
	#using = FadeStates
	#using = advice_trigger_highlights
	### Audio ###
	state = {
		name = _show
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_tab_close"
		}
	}
	state = {
		name = _hide
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_tab_close"
		}
	}
	### TODO THIS TOGGLE DOES NOT WORK (because of above stated FadeStates?)
	#state = {
	#	name = _hide
	#	on_start = "[PdxGuiTriggerAllAnimations('missions_view_closed')]"
	#}
	flowcontainer = {
		direction = vertical
		widget = {
			size = { @window_width 48 }
			using = MainWindowHeaderBox
			blockoverride "Title_text" { text = "MISSION_MENU_HEADER" }
			blockoverride "FlagOrIcon"
			{
				icon = {
					texture = "gfx/interface/base_parts/yellow_button_color_200fs.dds"
					framesize = { 100 100 }
					frame = 6
					position = { -2 -2 }
					size = { 32 32 }
					modify_texture = {
						texture = "gfx/interface/icons/menu_buttons/menu_mission.dds"
						blend_mode = alphamultiply
					}
				}
			}
			blockoverride "White_buttons" 
			{
				button_back = {
					shortcut = "previous_window"
					onclick = "[MissionView.OnPrevious]"
					tooltip = "PREVIOUS_MISSION_VIEW"
				}
				
				button_close = {
					onclick = "[MissionView.OnClose]"
					tooltip = "CLOSE"
					shortcut = "close_window"
				}
			}
		}
		flowcontainer = {
			ignoreinvisible = yes
			margin_top = 10
			parentanchor = hcenter
			flowcontainer = {
				visible = "[MissionView.IsMissionSelectionVisible]"
				direction = vertical
				icon_card_macro = {
					size = { 634 130 }
					parentanchor = hcenter
					blockoverride "Icon" { 
						texture = "[MissionView.GetHeaderImage]"
						size = { 624 120 }
					}
				}
				widget = {
					size = { 830 5 }
				}
				flowcontainer = {
					parentanchor = hcenter
					scrollarea = {
						size = { 310 554 }
						scrollbarpolicy_horizontal = always_off
						
						scrollbar_vertical = {
							using = VerticalScrollBar
						}
						
						scrollwidget = {
							flowcontainer = {
								direction = vertical
								spacing = 5
								datamodel = "[MissionView.GetAvailableMissions]"
								item = {
									mission_button = { }
								}
							}
						}
					}
					flowcontainer = {
						direction = vertical
						spacing = 10
						datacontext = "[MissionView.GetSelectedMission]"
						sub_header_v = {
							size = { 325 600 }
							blockoverride "Title_text" { text = "[MissionItem.GetTitle]" }
							blockoverride "Max_text_width" { max_width = 230 }
							scrollarea = {
								size = { 310 520 }
								position = { 0 32 }
								scrollbarpolicy_horizontal = always_off
								scrollbar_vertical = {
									using = VerticalScrollBar
								}
								scrollwidget = {
									flowcontainer = {
										margin = { 5 10 }
										direction = vertical
										spacing = 12
										container = {
											textbox = {
												using = BaseFontS
												using = Default_FontColor
												parentanchor = top|left
												autoresize = yes
												align = left|top
												multiline = yes
												text = "[MissionItem.GetDescription]"
												
												minimumsize = { 310 -1 }
												maximumsize = { 310 -1 }
											}
										}
										container = {
											textbox = {
												position = { 0 0 }
												using = BaseFontM
												using = Default_FontColor
												parentanchor = top|left
												autoresize = yes
												align = left|top
												elide = right
												text = "MISSION_VIEW_COMPLETION_CRITERIA"
												visible = "[MissionView.HasAvailableMission]"
												minimumsize = { 310 -1 }
												maximumsize = { 310 -1 }
											}
											textbox = {
												position = { 0 26 }
												using = BaseFontS
												using = Default_FontColor
												parentanchor = top|left
												autoresize = yes
												align = left|top
												multiline = yes
												text = "[MissionItem.GetCompletionCriteriaDescription]"
												
												minimumsize = { 310 -1 }
												maximumsize = { 310 -1 }
											}
										}
									}
								}
							}
						}
						text_button_square = {
							size = { 310 28 }
							
							blockoverride "On_click"
							{
								onclick = "[MissionItem.OnStart]"
								enabled = "[MissionItem.IsStartAllowed]"
								tooltip = "[MissionItem.GetStartTooltip]"
								clicksound = "event:/SFX/UI/Missions/sfx_ui_mission_accept"
							}
							
							blockoverride "Center_text" {
								text = "MISSION_VIEW_START_MISSION"
							}
						}
					}
				}
			}
			flowcontainer = {
				visible = "[MissionView.IsActiveMissionVisible]"
				enabled = "[MissionView.IsWindowEnabled]"
				datacontext = "[MissionView.GetActiveMission]"
				direction = vertical
				spacing = 5
				icon_card_macro = {
					size = { 634 130 }
					parentanchor = hcenter
					tooltip = "[MissionItem.GetImageTooltip]"
					blockoverride "Icon" { 
						texture = "[MissionView.GetHeaderImage]"
						size = { 624 120 }
					}
					panelka_center_2 = {
						size = { 624 32 }
						parentanchor = hcenter|bottom
						position = { 0 -6 }
						blockoverride "TextBox" { text = "[MissionItem.GetTitle]" }
					}
				}
				margin_widget = {
					size = { 830 640 }
					#using = VerticalScrollAreaCutOff
					background = {
						shaderfile = "gfx/FX/pdxgui_default.shader"
						using = beige_background
						alpha = 0.2
					}
					zoomarea = {
						name = "graph_zoomarea" # Do not change this name
						size = { 100% 100% }
						draggable_by = middle|left #This can be set to left, middle or right
						blockoverride "EdgeAlpha" {  }
						blockoverride "Margins" { 
							margin_right = 4
							margin_left = 4
							margin_bottom = 7
						}
						state = {
						  name = "_zoom_changed"
						  duration = 0.15
						}
						zoom = 0.6
						zoom_step = 0.1
						zoom_min = 0.2
						zoom_max = 1
						pan_position = { 0 0 }
						zoom_indicator = {
							parentanchor = bottom|right
							position = { -8 -8 }
							blockoverride "On_Click" {
								onclick = "[MissionView.ResetZoomAreaPosition]"
							}
						}
						scissor = yes
						zoomwidget = {
							flowcontainer = {
								margin = { 40 40 }
								#margin_top = 44
								#margin_bottom = 40
								#parentanchor = left
								#widgetanchor = left
								container = { #Line Mech		
									# These two widgets determine the margin between graph nodes
									widget = {
										name = "margin_top_left" # Do not change this name
										size = { 10 40 }
									}
									widget = {
										name = "margin_bottom_right" # Do not change this name
										size = { 10 40 }
									}
									# This widget tells the layout how to offset and space the lines
									widget = {
										name = "line_offset" # Do not change this name
										position = { 1 -38 } # Fixed offset (i.e. to compensate for line width
										size = { 20 0 } # Spacing between edges
									}
									
									# Container for all the edges in the graph
									container = {
										name = "line_area" # Do not change this name
									
										position = { 0 20 }
										datamodel = "[MissionView.GetLineItems]"
										item = {
											container = {
												position = "[MissionLineItem.GetPosition]"
							
												line = {
													using = ArrowLine
													line_type = BSpline
													points = "[MissionLineItem.GetPointsInContainer]"
													# points = "[MissionLineItem.GetPoints]" # If no container is used for the line
												}
											}
										}
									}
									
									# Container for all the nodes in the graph
									# Extra container for all the arrow heads on edges
									container = {
										position = { 0 20 }
										datamodel = "[MissionView.GetLineItems]"
										item = {
											widget = {
												position = "[MissionLineItem.GetTo]"
												size = { 32 32 }
												
												visible = "[Not(MissionLineItem.IsToNodeVirtual)]"
							
												icon = {
													name = "arrow_head"
													position = { -13 -11 }
													texture = "gfx/interface/missions/arrow_tip_d.dds"
												}
											}
										}
									}
									container = {
										name = "node_area" # Do not change this name
										
										position = { 0 0 }
										datamodel = "[MissionView.GetTaskItems]"
										
										item = {
											widget = {
												size = { 300 135 }
												widgetid = "[MissionTaskItem.GetKey]"
												position = "[MissionTaskItem.GetPosition]"
												onmousehierarchyenter = "[MissionTaskItem.OnMouseEnter]"
												onmousehierarchyleave = "[MissionTaskItem.OnMouseLeave]"
												enabled = "[And(Or(MissionTaskItem.IsPossible, MissionTaskItem.IsInProgress), Not(MissionTaskItem.IsCompleted))]"
												icon_button_square = {
													visible = "[And(And(Not(MissionTaskItem.IsPreventedByHighlightedTask), Not(MissionTaskItem.IsBypassed)), Not(MissionTaskItem.IsPreventedBy))]"
													size = { 90 90 }
													blockoverride "On_click" { onclick = "[MissionTaskItem.OnClick]" }
													blockoverride "IconSize" { size = { 80 80 } }
													blockoverride "Icon" { texture = "[MissionTaskItem.GetIcon]" }
													tooltip = "[MissionTaskItem.GetTooltip]"
													parentanchor = hcenter
												}
												icon_button_square = {
													visible = "[Or(Or(MissionTaskItem.IsBypassed, MissionTaskItem.IsPreventedByHighlightedTask ),MissionTaskItem.IsPreventedBy)]"
													enabled = no
													size = { 90 90 }
													blockoverride "IconSize" { size = { 80 80 } }
													blockoverride "Icon" { texture = "[MissionTaskItem.GetIcon]" }
													parentanchor = hcenter
												}
												widget = {
													size = { 100% 50 }
													using = background_widget
													parentanchor = bottom
													#tooltip = "[MissionTaskItem.GetTooltip]"
													container = {
														tooltip = "[MissionTaskItem.GetProgressTooltip]"
														visible = "[And(Not(MissionTaskItem.IsInstant), Not(MissionTaskItem.IsCompleted)))]"
														parentanchor = hcenter
														position = { 0 8 }
														fixed_size_progressbar = {
															blockoverride "size" { size = { 90 7 } }
															blockoverride "Value" { value = "[MissionTaskItem.GetProgress]" }
														}
														# mission in progress animation
														state = {							
															name = "progress_down"
															animation = { alpha = 0.5 }
															duration = 0.5
															trigger_when = "[MissionTaskItem.IsInProgress]"
															next = "progress_up"
														}
													
														state = {		
															name = "progress_up"
															animation = { alpha = 1 }
															duration = 1.0
															next = "progress_down"
														}
													}
													panelka_center_2 = {
														size = { 280 32 }
														alpha = "[TransparentIfTrue( MissionTaskItem.IsCompleted )]"
														parentanchor = hcenter|bottom
														position = { 0 -6 }
														blockoverride "TextBox" {
															text = "[MissionTaskItem.GetText]"
														}
													}
												}
												icon = {
													size = { 48 48 }
													parentanchor = right|bottom
													position = { -5 -5 }
													texture = "gfx/interface/icons/shared_icons/completed_task.dds"
													visible = "[MissionTaskItem.IsCompleted]"			
												}
											}
										}
									}
								}
							}
						}
					}
				}
				flowcontainer = {
					parentanchor = hcenter
					margin_top = 10
					spacing = 40
					text_button_square = {
						size = { 258 28 }
						blockoverride "On_click"
						{
							onclick = "[MissionItem.OnAbort]"
							enabled = "[MissionItem.IsAbortAllowed]"
							tooltip = "[MissionItem.GetAbortTooltip]"
						}
						
						blockoverride "Center_text" 
						{
							text = "MISSION_VIEW_ABORT_MISSION"
						}
					}
					
					text_button_square = {
						size = { 258 28 }
						
						blockoverride "On_click"
						{
							onclick = "[MissionItem.OnComplete]"
							enabled = "[MissionItem.IsCompleteAllowed]"
							tooltip = "[MissionItem.GetCompleteTooltip]"
						}
						
						blockoverride "Center_text" 
						{
							text = "MISSION_VIEW_COMPLETE_MISSION"
						}
					}
				}
			}
		}
	}
}
