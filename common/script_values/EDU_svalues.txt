EDU_available_slots_t1_governorship = {
	# Scope: Governorship
	# Function: Acts as the maximum number of pops that can have tier 1 education
	value = 0
	if = {
		limit = {
			any_governorship_state = {
				any_state_province = {
					has_building = EDU_school
				}
			}
		}
		every_governorship_state = {
			every_state_province = {
				add = num_of_EDU_school
			}
		}
		multiply = EDU_available_from_schools_local
	}
	# Free bonus from capital with a certain tech
	if = {
		limit = {
			owner = {
				# has_invention = education # TBD
			}
			any_governorship_state = {
				any_state_province = {
					is_capital = yes
				}
			}
		}
		min = 2
	}
}

EDU_available_from_schools_local = {
	# Scope: Any
	# Determines how many t1 education education slots a school provides in its governorship
	value = 15
}

EDU_available_from_universities_local = {
	# Scope: Any
	# Determines how many education slots a university provides in its governorship
	value = 12
}

EDU_university_national_bonus = {
	# Scope: Any
	value = 12
}

EDU_university_bonus_total_province = {
	# Scope: Province
	value = EDU_available_from_universities_local
	multiply = num_of_EDU_university
}

EDU_university_local_bonus_total_governorship = {
	# Scope: Governorship
	value = 0
	every_governorship_state = {
		every_state_province = {
			limit = {
				num_of_EDU_university > 0
			}
			add = EDU_university_bonus_total_province
		}
	}
}

EDU_university_national_bonus_here = {
	# Scope: Province
	value = EDU_university_national_bonus
	multiply = num_of_EDU_university
}

EDU_available_slots_t2_governorship = {
	# Scope: Governorship
	# Function: Acts as the maximum number of pops that can have tier 2 education
	value = 0
	if = {
		limit = {
			any_governorship_state = {
				any_state_province = {
					has_building = EDU_university
				}
			}
		}
		every_governorship_state = {
			every_state_province = {
				add = num_of_EDU_university
			}
		}
		multiply = EDU_available_from_universities_local # 8 pops per university locally, 12 pops to national pool via EDU_set_t2_national_bonus_from_universities
	}

	add = EDU_t2_bonus_governorship_nationwide_universities

	if = {
		limit = {
			has_variable = EDU_t1_educated_governorship
		}
		max = var:EDU_t1_educated_governorship # Cannot be higher than the number of pops with tier 1 education	
	}

	# Free bonus from capital with a certain tech
	if = {
		limit = {
			owner = {
				# has_invention = education # TBD
			}
			any_governorship_state = {
				any_state_province = {
					is_capital = yes
				}
			}
		}
		min = 2
	}

}

EDU_t2_bonus_governorship_nationwide_universities = {
	# Scope: Governorship
	# 4 t2 slots available from every university nationally
	# Relies on EDU_update_t2_national_bonus_from_universities
	value = 0
	add = {
		value = 0
		if = {
			limit = {
				owner = {
					has_variable = EDU_national_t2_bonus_from_universities
				}
			}
			value = owner.var:EDU_national_t2_bonus_from_universities
		}
	}
	multiply = FUNC_governorship_infrastructure_as_ratio_of_country
	round = ceiling
}

# Education required by jobs
# Scope: Province

# Commerce districts - 2 of t1, 1 of t2
EDU_required_t1_URB_commerce_district_per = {
	value = 7
}
EDU_required_t1_URB_commerce_district = {
	value = num_of_URB_commerce_district
	multiply = EDU_required_t1_URB_commerce_district_per
}
EDU_required_t2_URB_commerce_district_per = {
	value = 1
}
EDU_required_t2_URB_commerce_district = {
	value = num_of_URB_commerce_district
	multiply = EDU_required_t2_URB_commerce_district_per
}

# Industrial estates - 2 of t1, 0.5 of t2
EDU_required_t1_IND_industrial_estate_per = {
	value = 6
}
EDU_required_t1_IND_industrial_estate = {
	value = num_of_IND_industrial_estate
	multiply = EDU_required_t1_IND_industrial_estate_per
}
EDU_required_t2_IND_industrial_estate_per = {
	value = 1
}
EDU_required_t2_IND_industrial_estate = {
	value = num_of_IND_industrial_estate
	multiply = EDU_required_t2_IND_industrial_estate_per
}

# Schools - 2 of tier 2
EDU_required_t2_EDU_school_per = {
	value = 2
}
EDU_required_t2_EDU_school = {
	value = num_of_EDU_school
	multiply = EDU_required_t2_EDU_school_per
}

# Universities - 3 of tier 2
EDU_required_t2_EDU_university_per = {
	value = 3
}
EDU_required_t2_EDU_university = {
	value = num_of_EDU_university
	multiply = EDU_required_t2_EDU_university_per
}

# Hospitals - 2 of tier 2, 1 of tier 1
EDU_required_t1_INF_hospital_per = {
	value = 7
}
EDU_required_t1_INF_hospital = {
	value = num_of_INF_hospital
	multiply = EDU_required_t2_INF_hospital_per
}
EDU_required_t2_INF_hospital_per = {
	value = 5
}
EDU_required_t2_INF_hospital = {
	value = num_of_INF_hospital
	multiply = EDU_required_t2_INF_hospital_per
}

# Sewer infrastructure workers - 1 of tier 1, 0.5 of tier 2
EDU_required_t1_INF_sewer_infrastructure_per = {
	value = 3
}
EDU_required_t1_INF_sewer_infrastructure = {
	value = num_of_INF_sewer_infrastructure
	multiply = EDU_required_t1_INF_sewer_infrastructure_per
}
EDU_required_t2_INF_sewer_infrastructure_per = {
	value = 0.5
}
EDU_required_t2_INF_sewer_infrastructure = {
	value = num_of_INF_sewer_infrastructure
	multiply = EDU_required_t2_INF_sewer_infrastructure_per
}

# Railway workers - 1 of tier 1, 0.5 of tier 2
EDU_required_t1_INF_railway_upgrade_per = {
	value = 3
}
EDU_required_t1_INF_railway_upgrade = {
	value = num_of_INF_railway_upgrade
	multiply = EDU_required_t1_INF_railway_upgrade_per
}
EDU_required_t2_INF_railway_upgrade_per = {
	value = 1
}
EDU_required_t2_INF_railway_upgrade = {
	value = num_of_INF_railway_upgrade
	multiply = EDU_required_t2_INF_railway_upgrade_per
}

# Administration district - 2 of tier 1, 1 of tier 2
EDU_required_t1_URB_administration_district_per = {
	value = 4
}
EDU_required_t1_URB_administration_district = {
	value = num_of_URB_administration_district
	multiply = EDU_required_t1_URB_administration_district_per
}
EDU_required_t2_URB_administration_district_per = {
	value = 2
}
EDU_required_t2_URB_administration_district = {
	value = num_of_URB_administration_district
	multiply = EDU_required_t2_URB_administration_district_per
}

# Required and used slots at governorship level

EDU_required_t1_educated_governorship = {
	# Scope: Governorship
	# Function: Represents the number of t1 educated pops required by the job buildings in the province
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = EDU_required_t1_URB_commerce_district
			add = EDU_required_t1_IND_industrial_estate
			add = EDU_required_t1_INF_sewer_infrastructure
			add = EDU_required_t1_INF_railway_upgrade
			add = EDU_required_t1_INF_hospital
			add = EDU_required_t1_URB_administration_district
		}
	}
}

EDU_required_t2_educated_governorship = {
	# Scope: Governorship
	# Function: Represents the number of t2 educated pops required by the job buildings in the province
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = EDU_required_t2_URB_commerce_district
			add = EDU_required_t2_IND_industrial_estate
			add = EDU_required_t2_INF_sewer_infrastructure
			add = EDU_required_t2_INF_railway_upgrade
			add = EDU_required_t2_EDU_university
			add = EDU_required_t2_EDU_school
			add = EDU_required_t2_URB_administration_district
		}
	}
}

EDU_available_t1_educated_governorship = {
	# Scope: Governorship
	# Function: Represents the number of pops available for jobs out of the t1 educated pops. A certain number of educated pops will be occupied by job buildings
	value = var:EDU_t1_educated_governorship
	subtract = EDU_required_t1_educated_governorship
	#min = 0
}

EDU_available_t2_educated_governorship = {
	# Scope: Governorship
	# Function: Represents the number of pops available for jobs out of the t1 educated pops. A certain number of educated pops will be occupied by job buildings
	value = var:EDU_t2_educated_governorship
	subtract = EDU_required_t2_educated_governorship
	#min = 0
}

## Change rate - added to the educated pops var. If negative, this signifies a decline.

EDU_change_rate_t1 = {
	value = EDU_available_slots_t1_governorship
	subtract = var:EDU_t1_educated_governorship
	divide = 10 # 10% of the difference
	if = {
		limit = {
			EDU_available_slots_t2_governorship > var:EDU_t2_educated_governorship
		}
		min = {
			value = EDU_available_slots_t2_governorship
			divide = 20 # 5% of the total
		}		
		min = 1
	}
}

EDU_change_rate_t2 = {
	value = EDU_available_slots_t2_governorship
	subtract = var:EDU_t2_educated_governorship
	divide = 10 # 10% of the difference
	if = {
		limit = {
			EDU_available_slots_t2_governorship > var:EDU_t1_educated_governorship
		}
		min = {
			value = EDU_available_slots_t2_governorship
			divide = 20 # 5% of the total
		}
		min = 1
	}
}

EDU_uneducated_governorship = {
	value = FUNC_governorship_population_uncached
	subtract = var:EDU_t1_educated_governorship
}

EDU_uneducated_governorship_percentage = {
	value = EDU_uneducated_governorship
	divide = FUNC_governorship_population_uncached
}

EDU_t2_governorship_percentage = {
	value = var:EDU_t2_educated_governorship
	divide = FUNC_governorship_population_uncached
}

EDU_t1_governorship_percentage = {
	value = var:EDU_t1_educated_governorship
	divide = FUNC_governorship_population_uncached
}