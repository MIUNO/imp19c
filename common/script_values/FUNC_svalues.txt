FUNC_cities_10x = {
	# Scope: Country
	value = num_of_cities
	multiply = 10
}

FUNC_half_of_capital_region = {
	# Scope: Country
	# Function: Get half the num provinces in the country's capital region
	capital_scope.region = {
		every_region_province = {
			add = 1
		}
	}
	divide = 2
}

FUNC_capital_governorship_size = {
	# Scope: Country
	# Function: Get the number of provinces in the capital governorship
	capital_scope.governorship = {
		every_governorship_state = {
			every_state_province = {
				add = 1
			}
		}
	}
}

FUNC_state_coastal_ratio = {
	# Scope: State
	value = {
		every_state_province = {
			limit = {
				is_coastal = yes
			}
			add = 1
		}
		min = 0.0001
	}
	divide = {
		every_state_province = {
			add = 1
		}
		min = 1
	}
}

FUNC_comparison_variable_holder = {
	# Function: Hold a variable in a script value to put it on the right side of comparison operations.
	# There must be a global variable called l_variable_holder for this to work
	value = global_var:l_variable_holder
}

FUNC_num_governorships = {
	# Scope: Country
	every_governorships = {
		add = 1
	}
}

FUNC_num_governorships_with_ports = {
	# Scope: Country
	every_governorships = {
		limit = {
			any_governorship_state = {
				any_state_province = {
					num_of_port_building > 0
				}
			}
		}
		add = 1
	}
}

FUNC_country_total_forts = {
	# Scope: Country
	value = 0
	every_governorships = {
		every_governorship_state = {
			every_state_province = {
				limit = {
					num_of_fortress_building > 0
				}
				add = num_of_fortress_building
			}
		}
	}
}

FUNC_governorship_ratio_national_forts = {
	# Scope: Governorship
	# Function: Get the percentage of the country's forts that are located in this governorship
	value = 0
	if = {
		limit = {
			owner = {
				FUNC_country_total_forts > 0 
			}
		}
		every_governorship_state = {
			every_state_province = {
				limit = {
					num_of_fortress_building > 0
				}
				add = num_of_fortress_building
			}
		}
		owner = {
			divide = FUNC_country_total_forts
		}
	}
}

FUNC_governorship_country_pops_ratio = {
	# Scope: Governorship
	# Function: Get the % of country's pops in this governorship
	value = var:governorship_population
	divide = owner.country_population
}

FUNC_governorship_ratio_upper_strata = {
	# Scope: Governorship
	# Function: Get the % of a governorship's population that is upper strata
	# The pop ratios must already be cached
	value = var:governorship_upper_strata
	divide = var:governorship_population
}

FUNC_governorship_ratio_middle_strata = {
	# Scope: Governorship
	# Function: Get the % of a governorship's population that is middle strata
	# The pop ratios must already be cached
	value = var:governorship_middle_strata
	divide = var:governorship_population
}

FUNC_governorship_ratio_lower_strata = {
	# Scope: Governorship
	# Function: Get the % of a governorship's population that is lower strata
	# The pop ratios must already be cached
	value = var:governorship_lower_strata
	divide = var:governorship_population
}

FUNC_governorship_ratio_proletariat = {
	# Scope: Governorship
	# Function: Get the % of a governorship's population that is proletariat
	# The pop ratios must already be cached
	value = var:governorship_proletariat
	divide = var:governorship_population
}

FUNC_governorship_ratio_indentured = {
	# Scope: Governorship
	# Function: Get the % of a governorship's population that is indentured
	# The pop ratios must already be cached
	value = var:governorship_indentured
	divide = var:governorship_population
}

FUNC_governorship_ratio_tribesmen = {
	# Scope: Governorship
	# Function: Get the % of a governorship's population that is indentured
	# The pop ratios must already be cached
	value = var:governorship_tribesmen
	divide = var:governorship_population
}

FUNC_governorship_ratio_slaves = {
	# Scope: Governorship
	# Function: Get the % of a governorship's population that is slaves
	# The pop ratios must already be cached
	value = var:governorship_slaves
	divide = var:governorship_population
}

### 

FUNC_governorship_population_as_ratio_of_country = {
	# Scope: Governorship
	# Function: Get the % of the country's population living in this governorship
	value = var:governorship_population
	divide = owner.country_population
}

FUNC_governorship_infrastructure_as_ratio_of_country = {
	# Scope: Governorship
	# Function: Get the % of the country's infrastructure located in this governorship
	value = var:governorship_trade_capacity
	divide = {
		value = 1
		owner = {
			every_governorships = {
				add = var:governorship_trade_capacity
			}
		}
	}
}

FUNC_governorship_population_uncached = {
	# Scope: Governorship
	# Function: Get the population of the governorship without using the cached var
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = total_population
		}
	}
}

province_industrialisation_percent = {
	value = civilization_value
	divide = 100
}

FUNC_primary_religion_percentage_province = {
	# Scope: Province
	# Function: Get the % of pops in this province of the primary religion
	value = num_other_religion
	divide = total_population
	subtract = 1
	multiply = -1
}