CURRENCY_create_starting_currencies = {
	# Scope: Country
	# Function: Runs at startup to set up currencies, after the reserves are set up


	# BRITISH POUND STERLING
	c:GBR = { add_to_list = currency_adopters_list }
	
	CURRENCY_create_new_currency = {
		currency_name = pound_sterling
		originator_tag = GBR
		backing_type = bimetallic_standard
		units_to_the_lb = 62
		currency_adopters_list = currency_adopters_list
		use_currency_peggers_list = false
		currency_peggers_list = false
		override_existing = yes
	}

	CURRENCY_set_amounts_country = {
		target_country = GBR
		amt_circulated_thousands = 920
		amt_circulated_millions = 811
		amt_circulated_billions = 0
		amt_national_debt_thousands = 968
		amt_national_debt_millions = 845
		amt_national_debt_billions = 0
	}

	CURRENCY_set_country_currency = {
		target_country = GBR
		currency_name = pound_sterling
	}

	every_in_list = {
		name = currency_adopters_list
		remove_from_list = currency_adopters_list
	}


	# FRENCH FRANC
	c:FRA = { add_to_list = currency_adopters_list }

	# Units to lb:
	#22 francs = 5.8g gold
	#78.2 of above goes into 1 lb
	#therefore 22 x 78.2


	# Define whichever parameters to test with
	CURRENCY_create_new_currency = {
		currency_name = Franc
		originator_tag = FRA
		backing_type = gold_standard
		units_to_the_lb = 1720
		currency_adopters_list = currency_adopters_list
		use_currency_peggers_list = false
		currency_peggers_list = false
		override_existing = yes
	}

	CURRENCY_set_amounts_country = {
		target_country = FRA
		amt_circulated_thousands = 134
		amt_circulated_millions = 25
		amt_circulated_billions = 3
		amt_national_debt_thousands = 0
		amt_national_debt_millions = 700
		amt_national_debt_billions = 2
	}

	CURRENCY_set_country_currency = {
		target_country = FRA
		currency_name = Franc
	}
}

CURRENCY_setup_all_reserves = {
	# Scope: Random country
	# Function: Set up the precious metal reserves for all countries at the start of the game
	# Called: By oa_economy_setup
	c:GBR = {
		CURRENCY_country_setup_reserves = {
			gold_reserve_size = 444 # hundreds lb
			gold_reserve_accumulation_rate = 50 # hundreds lb

			silver_reserve_size = 7 # hundreds lb
			silver_reserve_accumulation_rate = 3 # hundreds lb
		}
	}

	c:FRA = {
		CURRENCY_country_setup_reserves = {
			gold_reserve_size = 1300 # hundreds lb
			gold_reserve_accumulation_rate = 50 # hundreds lb

			silver_reserve_size = 0 # hundreds lb
			silver_reserve_accumulation_rate = 0 # hundreds lb
		}
	}

	every_country = {
		limit = {
			NOT = {
				OR = {
					has_variable = gold_reserve_size
					has_variable = silver_reserve_size
				}
			}
		}
		CURRENCY_country_setup_reserves = {
			gold_reserve_size = CURRENCY_base_starting_reserve_gold # hundreds lb
			gold_reserve_accumulation_rate = CURRENCY_base_starting_reserve_accumulation_rate_gold # hundreds lb

			silver_reserve_size = CURRENCY_base_starting_reserve_silver # hundreds lb
			silver_reserve_accumulation_rate = CURRENCY_base_starting_reserve_accumulation_rate_silver # hundreds lb
		}
	}
}

CURRENCY_all_governorships_send_to_reserves = {
	# Scope: Country
	# Function: Send the stock intended for reserves from all governorships to the national reserve
	# Also record the actual change in each stockpile for the GUI display
	set_variable = {
		name = gold_reserve_actual_change
		value = 0
	}
	set_variable = {
		name = silver_reserve_actual_change
		value = 0
	}
	ordered_governorships = {
		order_by = {
			order_by = GOODS_governorship_gold_produced
		}
		max = 999
		CURRENCY_governorship_send_to_reserves = {
			tradegood = gold
		}
	}
	ordered_governorships = {
		order_by = {
			order_by = GOODS_governorship_silver_produced
		}
		max = 999
		CURRENCY_governorship_send_to_reserves = {
			tradegood = silver
		}
	}
}

CURRENCY_governorship_send_to_reserves = {
	# Scope: Governorship
	# Function: Send the specified amount of the specified precious metal ($tradegood$ to the national reserves
	set_local_variable = {
		name = $tradegood$_for_reserves
		value = DEMAND_$tradegood$_reserve_accumulation_rate
	}

	if = {
		limit = {
			has_variable = shortage_$tradegood$
		}
		change_local_variable = {
			name = $tradegood$_for_reserves
			multiply = var:shortage_$tradegood$
		}
	}

	if = {
		limit = {
			owner.var:$tradegood$_reserve_actual_change > owner.DEMAND_$tradegood$_reserve_accumulation_rate_national
		}
		set_local_variable = {
			name = $tradegood$_for_reserves
			value = 0
		}
	}

	if = {
		limit = {
			DEMAND_difference_$tradegood$ > 0
		}
		change_local_variable = {
			name = $tradegood$_for_reserves
			add = DEMAND_difference_$tradegood$
		}
	}

	if = {
		limit = {
			local_var:$tradegood$_for_reserves > owner.DEMAND_$tradegood$_reserve_accumulation_rate_national
		}
		set_local_variable = {
			name = $tradegood$_for_reserves
			value = owner.DEMAND_$tradegood$_reserve_accumulation_rate_national
		}
	}

	owner = {
		change_variable = {
			name = $tradegood$_reserve_size
			add = local_var:$tradegood$_for_reserves
		}
		change_variable = {
			name = $tradegood$_reserve_actual_change
			add = local_var:$tradegood$_for_reserves
		}
	}

}

CURRENCY_alter_own_debt = {
	# Scope: Country
	# Function: Add to the national debt value, accounting for the thousands, millions and billions values that need to be displayed
	change_variable = {
		name = CURRENCY_national_debt_thousands
		add = $thousands$
	}
	if = {
		limit = {
			var:CURRENCY_national_debt_thousands > 1000
		}
		change_variable = {
			name = CURRENCY_national_debt_thousands
			subtract = 1000
		}
		change_variable = {
			name = CURRENCY_national_debt_millions
			add = 1
		}
	}

	change_variable = {
		name = CURRENCY_national_debt_millions
		add = $millions$
	}
	if = {
		limit = {
			var:CURRENCY_national_debt_millions > 1000
		}
		change_variable = {
			name = CURRENCY_national_debt_millions
			subtract = 1000
		}
		change_variable = {
			name = CURRENCY_national_debt_billions
			add = 1
		}
	}

	change_variable = {
		name = CURRENCY_national_debt_billions
		add = $billions$
	}
}

CURRENCY_alter_amt_circulated = {
	# Scope: Country
	# Function: Add to the national debt value, accounting for the thousands, millions and billions values that need to be displayed
	change_variable = {
		name = CURRENCY_amt_circulated_thousands
		add = $thousands$
	}
	if = {
		limit = {
			var:CURRENCY_amt_circulated_thousands > 1000
		}
		change_variable = {
			name = CURRENCY_amt_circulated_thousands
			subtract = 1000
		}
		change_variable = {
			name = CURRENCY_amt_circulated_millions
			add = 1
		}
	}

	change_variable = {
		name = CURRENCY_amt_circulated_millions
		add = $millions$
	}
	if = {
		limit = {
			var:CURRENCY_amt_circulated_millions > 1000
		}
		change_variable = {
			name = CURRENCY_amt_circulated_millions
			subtract = 1000
		}
		change_variable = {
			name = CURRENCY_amt_circulated_billions
			add = 1
		}
	}

	change_variable = {
		name = CURRENCY_amt_circulated_billions
		add = $billions$
	}
}

CURRENCY_set_amounts_country = {
	# Scope: Country
	# Function: Set the amount of currency in circulation in this country, both in public pockets and as national debt owned by the state

	# Units of this currency in public circulation, in the tens of thousands
	c:$target_country$ = {
		set_variable = {
			name = CURRENCY_amt_circulated_thousands
			value = $amt_circulated_thousands$
		}
		set_variable = {
			name = CURRENCY_amt_circulated_millions
			value = $amt_circulated_millions$
		}
		set_variable = {
			name = CURRENCY_amt_circulated_billions
			value = $amt_circulated_billions$
		}

		# Units of this currency in the state's ledgers
		set_variable = {
			name = CURRENCY_national_debt_thousands
			value = $amt_national_debt_thousands$
		}
		set_variable = {
			name = CURRENCY_national_debt_millions
			value = $amt_national_debt_millions$
		}
		set_variable = {
			name = CURRENCY_national_debt_billions
			value = $amt_national_debt_billions$
		}
	}
}

CURRENCY_governorship_allocate_pops_currency = {
	# Scope: Governorship
	# Function: Give the pops a currency stockpile to replace a percentage of their wealth
}

CURRENCY_governorship_allocate_local_currency = {
	# Scope: Governorship
	# Function: Determine which currency is in use in a governorship, so it can be converted if that changes
}

CURRENCY_set_country_currency = {
	# Scope: Country
	# Functon: Set the official currency of a country
	c:$target_country$ = {

		save_scope_as = currency_set_country

		if = {
			limit = {
				has_variable = official_currency
			}
			var:official_currency = {
				remove_list_variable = {
					name = currency_adopted_countries

					target = scope:currency_set_country
				}
				remove_list_variable = {
					name = currency_pegged_countries

					target = scope:currency_set_country
				}
			}
		}

		set_variable = {
			name = official_currency
			value = global_var:$currency_name$
		}

		global_var:$currency_name$ = {
			add_to_variable_list = {
				name = currency_adopted_countries
				target = scope:currency_set_country
			}
		}

	}
}

CURRENCY_peg_country_currency = {
	# Scope: Country
	# Function: Set this country's currency as the named currency, but do not contribute to its value
	c:$target_country$ = {

		save_scope_as = curreny_peg_country

		if = {
			limit = {
				has_variable = official_currency
			}
			var:official_currency = {
				remove_list_variable = {
					name = currency_adopted_countries

					target = scope:curreny_peg_country
				}
				remove_list_variable = {
					name = currency_pegged_countries

					target = scope:curreny_peg_country
				}
			}
		}

		set_variable = {
			name = official_currency
			value = global_var:$currency_name$
		}

		global_var:$currency_name$ = {
			add_to_variable_list = {
				name = currency_pegged_countries
				target = scope:curreny_peg_country
			}
		}

	}
}

CURRENCY_create_new_currency = {
	# Scope: country
	# Function: Create a new curreny object
	# Takes arguments:
	# $currency_name$, localisable flag
	# $originator_tag$, country TAG
	# $amt_circulated$, number - the number of units of this currency in circulation
	# $backing_type$, string:
	#	gold_standard (just gold)
	#	bimetallic_standard (gold and silver)
	# Two lists
	# Currency adopters list (min. 1 member)
	# $use_currency_peggers_list$ = flag, "true" or "false" to trigger whether the currency peggers list is counted
	# Currency peggers list (may be empty)

	if = {
		limit = {
			NOT = {
				has_global_variable = $currency_name$
			}
		}
		save_scope_as = currency_create_scope

		random_province = {
			limit = {
				NOT = {
					has_variable = is_currency
				}
			}
			CURRENCY_setup_currency_info = {
				currency_name = $currency_name$
				currency_adopters_list = $currency_adopters_list$
				currency_peggers_list = $currency_peggers_list$
				use_currency_peggers_list = $use_currency_peggers_list$
				originator_tag = $originator_tag$
				units_to_the_lb = $units_to_the_lb$
				backing_type = $backing_type$
			}

		}
	}
	else_if = {
		limit = {
			has_global_variable = $currency_name$
			flag:$override_existing$ = flag:yes # Whether to override an existing currency
		}
		global_var:$currency_name$ = {
			CURRENCY_setup_currency_info = {
				currency_name = $currency_name$
				currency_adopters_list = $currency_adopters_list$
				currency_peggers_list = $currency_peggers_list$
				use_currency_peggers_list = $use_currency_peggers_list$
				originator_tag = $originator_tag$
				units_to_the_lb = $units_to_the_lb$
				backing_type = $backing_type$
			}
		}
	}

}

CURRENCY_setup_currency_info = {
	# Scope: Currency province
	# Function: Set the given currency info in a specified currency
	save_scope_as = currency_scope

	set_global_variable = {
		name = $currency_name$
		value = scope:currency_scope
	}

	# Add the countries to adopt this currency and to peg to it. WARNING, this overrides existing currency settings for countries, so only set these if you really mean to.
	scope:currency_create_scope = {
		every_in_list = {
			name = $currency_adopters_list$

			save_scope_as = target_country

			CURRENCY_set_country_currency = {
				currency_name = $currency_name$
				target_country = scope:target_country
			}
		}
		
		if = {
			limit = {
				flag:$use_currency_peggers_list$ = flag:true
			}
			every_in_list = {
				name = $currency_peggers_list$

				save_scope_as = target_country

				CURRENCY_peg_country_currency = {
					currency_name = $currency_name$
					target_country = scope:target_country
				}
			}
		}
	}

	set_variable = {
		name = currency_name
		value = flag:$currency_name$ # Can be localised
	}

	set_variable = {
		name = originator_country
		value = c:$originator_tag$
	}

	# Units of this currency to the pound of backing material
	set_variable = {
		name = units_to_the_lb
		value = $units_to_the_lb$
	}

	set_variable = {
		name = backing_type
		value = flag:$backing_type$
	}

	# Backing value - the value of the currency based on the backing of precious metal reserves
	CURRENCY_update_backing_value = yes
	# Purchasing power - the number of wealth units per unit of this currency
	# Automatic wealth purchasing power calculation takes the import price of all tradegoods
	CURRENCY_update_purchasing_power = yes
}

CURRENCY_update_purchasing_power = {
	# Scope: Currency province
	# Function: Update the purchasing power of one unit of this currency, in terms of 1 unit of wealth
	# Purchasing power - the number of wealth units per unit of this currency
	# Automatic wealth purchasing power calculation takes the import price of all tradegoods

	save_scope_as = currency_scope

	# Set purchasing power as 1, it will later be divided by the the demand times cost of all tradegoods in countries who have adopted this tradegood
	set_variable = {
		name = purchasing_power
		value = 1
	}

	# Set a variable to contain the total wealth value of all demand in every country which has adopted this currency
	set_variable = {
		name = wealth_value_total_all_demand
		value = 0
	}

	every_in_list = {
		variable = currency_adopters_list

		save_scope_as = this_country

		scope:currency_scope = {
			every_tradegood_complex = {
				APPLY = CURRENCY_add_tradegood_total_demand_cost
			}
		}
	}

	if = {
		limit = {
			var:wealth_value_total_all_demand > 0
		}
		change_variable = {
			name = purchasing_power
			divide = var:wealth_value_total_all_demand
		}
	}

	change_variable = {
		name = purchasing_power
		multiply = var:backing_value
	}

}

CURRENCY_add_tradegood_total_demand_cost = {
	# Scope: Currency province
	# Function: Get the total cost of fulfilling all demand for $tradegood$ in the current country (only when called as part of a currency_adopters_list in CURRENCY_update_purchasing_power)
	set_local_variable = {
		name = amount_to_add
		value = scope:this_country.DEMAND_country_$tradegood$
	}
	change_local_variable = {
		name = amount_to_add
		multiply = scope:this_country.var:country_unit_price_$tradegood$
	}

	change_variable = {
		name = wealth_value_total_all_demand
		add = local_var:amount_to_add
	}
}

CURRENCY_update_backing_value = {
	# Scope: Currency province
	# Function: Update the value intrinsic per unit of currency based on the precious metal or other system backing it

	if = {
		limit = {
			var:backing_type = flag:gold_standard
		}
		set_variable = {
			name = backing_value
			value = var:originator_country.var:country_unit_price_gold
		}
		change_variable = {
			name = backing_value
			multiply = var:originator_country.var:gold_reserve_size
		}
	}
	else_if = {
		limit = {
			var:backing_type = flag:silver_standard
		}
		set_variable = {
			name = backing_value
			value = var:originator_country.var:country_unit_price_silver
		}
		change_variable = {
			name = backing_value
			multiply = var:originator_country.var:silver_reserve_size
		}
	}
	else_if = {
		limit = {
			var:backing_type = flag:bimetallic_standard
		}
		set_local_variable = {
			name = backing_value_from_silver
			value = var:originator_country.var:country_unit_price_silver
		}
		change_local_variable = {
			name = backing_value_from_silver
			multiply = var:originator_country.var:silver_reserve_size
		}
		set_local_variable = {
			name = backing_value_from_gold
			value = var:originator_country.var:country_unit_price_gold
		}
		change_local_variable = {
			name = backing_value_from_gold
			multiply = var:originator_country.var:gold_reserve_size
		}
		set_variable = {
			name = backing_value
			value = local_var:backing_value_from_silver
		}
		change_variable = {
			name = backing_value
			add = local_var:backing_value_from_gold
		}
	}

}

CURRENCY_country_setup_reserves = {
	# Scope: Country
	# Function: Setup up variables for precious metal reserves
	# The smalleste integer unit of the reserves is 1 hundred pounds (lb)
	set_variable = {
		name = gold_reserve_size
		value = $gold_reserve_size$
	}
	set_variable = {
		name = silver_reserve_size
		value = $silver_reserve_size$
	}

	set_variable = {
		name = gold_accumulation_rate
		value = $gold_reserve_accumulation_rate$
	}
	set_variable = {
		name = silver_accumulation_rate
		value = $silver_reserve_accumulation_rate$
	}
}

CURRENCY_country_set_accumulation_rate = {
	# Scope: Country
	# Function: Set the target amount of a precious metal to buy every quarter in reserve
	set_variable = {
		name = $reserve_material$_accumulation_rate
		value = $target_value$
	}
}

CURRENCY_country_update_reserve_size = {
	# Scope: Country
	# Function: Update the amount in the reserve based on how much the governorships can acquire
	every_governorships = {
		save_scope_as = governorship_scope
		owner = {
			change_variable = {
				name = $reserve_material$_reserve_size
				add = scope:governorship_scope.DEMAND_$reserve_material$_reserve_accumulation_rate
			}
		}
	}
}

## WIP ##

CURRENCY_sell_reserve = {
	# Scope: Country
	# Function: Sell off reserves, which dumps into the stockpiles of governorships based on the proportion of the country's total commercial districts in those governorships
}