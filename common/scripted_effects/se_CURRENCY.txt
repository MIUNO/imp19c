CURRENCY_set_country_currency = {
	# Scope: Country
	# Functon: Set the official currency of a country
	c:$target_country$ = {

		save_scope_as = currency_set_country

		if = {
			limit = {
				has_variable = official_currency
			}
			var:official_currency = {
				remove_list_variable = {
					name = currency_adopted_countries

					target = scope:currency_set_country
				}
				remove_list_variable = {
					name = currency_pegged_countries

					target = scope:currency_set_country
				}
			}
		}

		set_variable = {
			name = official_currency
			value = global_var:$currency_name$
		}

		global_var:$currency_name$ = {
			add_to_variable_list = {
				name = currency_adopted_countries
				target = scope:currency_set_country
			}
		}

	}
}

CURRENCY_peg_country_currency = {
	# Scope: Country
	# Function: Set this country's currency as the named currency, but do not contribute to its value
	c:$target_country$ = {

		save_scope_as = curreny_peg_country

		if = {
			limit = {
				has_variable = official_currency
			}
			var:official_currency = {
				remove_list_variable = {
					name = currency_adopted_countries

					target = scope:curreny_peg_country
				}
				remove_list_variable = {
					name = currency_pegged_countries

					target = scope:curreny_peg_country
				}
			}
		}

		set_variable = {
			name = official_currency
			value = global_var:$currency_name$
		}

		global_var:$currency_name$ = {
			add_to_variable_list = {
				name = currency_pegged_countries
				target = scope:curreny_peg_country
			}
		}

	}
}

CURRENCY_create_new_currency = {
	# Scope: country
	# Function: Create a new curreny object
	# Takes arguments:
	# $currency_name$, localisable flag
	# $originator_tag$, country TAG
	# $amt_circulated$, number - the number of units of this currency in circulation
	# $backing_type$, string:
	#	gold_standard (just gold)
	#	bimetallic_standard (gold and silver)
	# Two lists
	# Currency adopters list (min. 1 member)
	# Currency peggers list (may be empty)
	save_scope_as = currency_create_scope

	random_province = {
		limit = {
			NOT = {
				has_variable = is_currency
			}
		}
		save_scope_as = currency_scope

		set_global_variable = {
			name = $currency_name$
			value = scope:currency_scope
		}

		# Add the countries to adopt this currency and to peg to it. WARNING, this overrides existing currency settings for countries, so only set these if you really mean to.
		scope:currency_create_scope = {
			every_in_list = {
				variable = $currency_adopters_list$

				save_scope_as = target_country

				CURRENCY_set_country_currency = {
					currency_name = $currency_name$
					target_country = scope:target_country
				}
			}
			
			if = {
				limit = {
					variable_list_size = {
						name = $currency_peggers_list$
						value > 0
					}
				}
				every_in_list = {
					variable = $currency_peggers_list$

					save_scope_as = target_country

					CURRENCY_peg_country_currency = {
						currency_name = $currency_name$
						target_country = scope:target_country
					}
				}
			}
		}

		set_variable = {
			name = currency_name
			value = flag:$currency_name$ # Can be localised
		}

		set_variable = {
			name = originator_country
			value = c:$originator_tag$
		}

		set_variable = {
			name = amt_circulated
			value = $amt_circulated$
		}

		set_variable = {
			name = backing_type
			value = $backing_type$
		}

		# Purchasing power - the number of wealth units per unit of this currency
		# Automatic wealth purchasing power calculation takes the import price of all tradegoods
		CURRENCY_update_purchasing_power = yes
	}

}

CURRENCY_update_purchasing_power = {
	# Scope: Currency province
	# Function: Update the purchasing power of one unit of this currency, in terms of 1 unit of wealth
	# Purchasing power - the number of wealth units per unit of this currency
	# Automatic wealth purchasing power calculation takes the import price of all tradegoods

	save_scope_as = currency_scope

	# Set purchasing power as 1, it will later be divided by the the demand times cost of all tradegoods in countries who have adopted this tradegood
	set_variable = {
		name = purchasing_power
		value = 1
	}

	# Set a variable to contain the total wealth value of all demand in every country which has adopted this currency
	set_variable = {
		name = wealth_value_total_all_demand
		value = 0
	}

	every_in_list = {
		variable = currency_adopters_list

		save_scope_as = this_country

		scope:currency_scope = {
			every_tradegood_complex = {
				APPLY = CURRENCY_add_tradegood_total_demand_cost
			}
		}
	}

	change_variable = {
		name = purchasing_power
		divide = var:originator_country.WEALTH_import_price_all_tradegoods # This should probably be weighted by the country's demand for each tradegood, but that would be more performance intensive. Think of a way to scale this realistically without too many calculations?
	}	
}

CURRENCY_add_tradegood_total_demand_cost = {
	# Scope: Currency province
	# Function: Get the total cost of fulfilling all demand for $tradegood$ in the current country (only when called as part of a currency_adopters_list in CURRENCY_update_purchasing_power)
	set_local_variable = {
		name = amount_to_add
		value = scope:this_country.DEMAND_country_$tradegood$
	}
	change_local_variable = {
		name = amount_to_add
		multiply = scope:this_country.var:country_import_price_$tradegood$
	}

	change_variable = {
		name = wealth_value_total_all_demand
		add = local_var:amount_to_add
	}
}

CURRENCY_update_backing_value = {
	# Scope: Currency province
	# Function: Update the value intrinsic per unit of currency based on the precious metal or other system backing it

	if = {
		limit = {
			var:backing_type = flag:gold_standard
		}
		set_variable = {
			name = backing_value
			value = var:originator_country.var:country_import_price_gold
		}
		change_variable = {
			name = backing_value
			multiply = var:originator_country.var:currency_reserves_gold
		}
	}
	else_if = {
		limit = {
			var:backing_type = flag:silver_standard
		}
		set_variable = {
			name = backing_value
			value = var:originator_country.var:country_import_price_silver
		}
		change_variable = {
			name = backing_value
			multiply = var:originator_country.var:currency_reserves_silver
		}
	}
	else_if = {
		limit = {
			var:backing_type = flag:bimetallic_standard
		}
		set_local_variable = {
			name = backing_value_from_silver
			value = var:originator_country.var:country_import_price_silver
		}
		change_local_variable = {
			name = backing_value_from_silver
			multiply = var:originator_country.var:currency_reserves_silver
		}
		set_local_variable = {
			name = backing_value_from_gold
			value = var:originator_country.var:country_import_price_silver
		}
		change_local_variable = {
			name = backing_value_from_gold
			multiply = var:originator_country.var:currency_reserves_silver
		}
		set_variable = {
			name = backing_value
			value = local_var:backing_value_from_silver
		}
		change_variable = {
			name = backing_value
			add = local_var:backing_value_from_gold
		}
	}

	change_variable = {
		name = backing_value
		divide = var:amt_circulated
	}
}

CURRENCY_country_setup_reserves = {
	# Scope: Country
	# Function: Setup up empty variables for precious metal reserves
	set_variable = {
		name = gold_reserve_size
		value = $gold_reserve_size$
	}
	set_variable = {
		name = silver_reserve_size
		value = $silver_reserve_size$
	}

	set_variable = {
		name = gold_reserve_target
		value = $gold_reserve_target_size$
	}
	set_variable = {
		name = silver_reserve_target
		value = $silver_reserve_target_size$
	}
}

CURRENCY_country_set_reserve_target = {
	# Scope: Country
	# Function: Set the target amount of a precious metal to hold in reserve
	set_variable = {
		name = $reserve_material$_reserve_target
		value = $target_value$
	}
}

CURRENCY_country_update_reserve_size = {
	# Scope: Country
	# Function: Update the amount in the reserve based on how much the governorships can acquire
	every_governorships = {
		save_scope_as = governorship_scope
		owner = {
			change_variable = {
				name = $reserve_material$_reserve_size
				add = scope:governorship_scope.DEMAND_$reserve_material$_reserve_accumulation_rate
			}
		}
	}
}