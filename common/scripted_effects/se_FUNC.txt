FUNC_clamp_variable = {
	# Scope: Any
	# Function: Set a max and min (optional) for the given variable
	# Special arguments
	# max_type and min_type should be '' if they're svalues, or 'var:' if they're variables
	# The variable to be bounded must not include it's var: prefix

	if = {
		limit = { NOT = { $max_type$$max$ = 0 } }
		set_local_variable = {
			name = l_comparison_diff
			value = $max_type$$max$
		}
		change_local_variable = {
			name = l_comparison_diff
			subtract = var:$variable$
		}
		if = {
			limit = {
				local_var:l_comparison_diff < 0
			}
			set_variable = {
				name = $variable$
				value = $max_type$$max$
			}
		}
	}

	

	if = {
		limit = { NOT = { $min_type$$min$ = 0 } }
		set_local_variable = {
			name = l_comparison_diff
			value = var:$variable$
		}
		change_local_variable = {
			name = l_comparison_diff
			subtract = $min_type$$min$
		}
		if = {
			limit = {
				local_var:l_comparison_diff < 0
			}
			set_variable = {
				name = $variable$
				value = $min_type$$min$
			}
		}
	} 

}

FUNC_add_modifier_stack = {
	# Credit to Jay DoubleU in Imperator mod coop
	# Scope: $TYPE$
    if = {
        limit = {
            has_$TYPE$_modifier = $MOD$
        }
        remove_$TYPE$_modifier = $MOD$
    }
    while = {
        count = $NUM$
        add_$TYPE$_modifier = {
            name = $MOD$
            mode = add
            duration = $DUR$
        }
    }
}

FUNC_add_province_modifier_stack = {
	# Credit to Jay DoubleU in Imperator mod coop
	# Scope: Province
    if = {
        limit = {
            has_province_modifier = $MOD$
        }
        remove_province_modifier = $MOD$
    }
    while = {
        count = $NUM$
        add_province_modifier = {
            name = $MOD$
            mode = add
            duration = $DUR$
        }
    }
}

FUNC_add_state_modifier_stack = {
	# Credit to Jay DoubleU in Imperator mod coop
	# Scope: Province
    if = {
        limit = {
            has_state_modifier = $MOD$
        }
        remove_state_modifier = $MOD$
    }
    while = {
        count = $NUM$
        add_state_modifier = {
            name = $MOD$
            mode = add
            duration = $DUR$
        }
    }
}

FUNC_visualise_tradezones = {
	# Scope: any
	# Function: Make all tradezones owned by tags, so that they can be quickly visualised
	every_trade_center = {
		switch = {
			trigger = has_variable

			is_india_tradezone = {
				every_province = {
					limit = {
						india_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:MRT
				}
			}
			is_east_north_america_tradezone = {
				every_province = {
					limit = {
						east_north_america_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:USA
				}
			}
			is_west_north_america_tradezone = {
				every_province = {
					limit = {
						west_north_america_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:MEX
				}
			}
			is_caribbean_tradezone = {
				every_province = {
					limit = {
						caribbean_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:MSK
				}
			}
			is_west_south_america_tradezone = {
				every_province = {
					limit = {
						west_south_america_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:CHL
				}
			}
			is_east_south_america_tradezone = {
				every_province = {
					limit = {
						east_south_america_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:BRZ
				}
			}
			is_south_east_asia_tradezone = {
				every_province = {
					limit = {
						south_east_asia_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:SAM
				}
			}
			is_indo_china_tradezone = {
				every_province = {
					limit = {
						indo_china_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:LPG
				}
			}
			is_yellow_sea_tradezone = {
				every_province = {
					limit = {
						yellow_sea_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:KOR
				}
			}
			is_southern_africa_tradezone = {
				every_province = {
					limit = {
						southern_africa_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:XHO
				}
			}
			is_west_africa_tradezone = {
				every_province = {
					limit = {
						west_africa_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:ATI
				}
			}
			is_east_africa_tradezone = {
				every_province = {
					limit = {
						east_africa_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:BOE
				}
			}
			is_middle_east_tradezone = {
				every_province = {
					limit = {
						middle_east_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:ERI
				}
			}
			is_western_steppe_tradezone = {
				every_province = {
					limit = {
						western_steppe_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:KHV
				}
			}
			is_eastern_steppe_tradezone = {
				every_province = {
					limit = {
						eastern_steppe_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:TNN
				}
			}
			is_upper_yangtzi_tradezone = {
				every_province = {
					limit = {
						upper_yangtzi_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:MKD
				}
			}
			is_atlantic_seaboard_tradezone = {
				every_province = {
					limit = {
						atlantic_seaboard_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:GBR
				}
			}
			is_central_europe_tradezone = {
				every_province = {
					limit = {
						central_europe_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:HZS
				}
			}
			is_west_mediterranean_tradezone = {
				every_province = {
					limit = {
						west_mediterranean_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:MCO
				}
			}
			is_baltic_tradezone = {
				every_province = {
					limit = {
						baltic_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:SWE
				}
			}
			is_east_europe_tradezone = {
				every_province = {
					limit = {
						east_europe_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:KRA
				}
			}
			is_east_mediterranean_tradezone = {
				every_province = {
					limit = {
						east_mediterranean_tradezone = { PROVINCE = yes }
					}
					set_owned_by = c:SRB
				}
			}
		}
	}
}

GT_factor_raw_input_costs_clothing = {
	# Scope: Tradezone province
	# Function: Add the per-unit price of raw tradegoods for the given manufactured $tradegood$
	change_variable = {
		name = local_price_clothing
		add = {
			add = {
				value = var:local_price_textile_fibres
				multiply = INDUSTRY_demand_importance_clothing_textile_fibres
			}
			add = {
				value = var:local_price_dye
				multiply = INDUSTRY_demand_importance_clothing_dye
			}
			add = {
				value = var:local_price_livestock
				multiply = INDUSTRY_demand_importance_clothing_livestock
			}
		}
	}
}

FUNC_declare_war_with_wargoal_province = {
	# Scope: Country
	# Function: Declares war on target country while "excluding protected_when_attacked = no" subjects
	# Also brings in colonies, autonomous governorships and territories
	save_scope_as = instigator
	$target$ = {
		# Momentarily remove tributary status from self
		if = {
			limit = {
				is_subject = yes
			}
			save_scope_as = vassal_to_remove
			# Save the subject type
			if = {
				limit = {
					OR = {
						is_subject_type = tributary
						is_subject_type = sinosphere_tributary
					}
				}
				set_local_variable = tributary_was_released
				overlord = {
					save_scope_as = overlord_to_reinstate
					release_subject = scope:vassal_to_remove
				}
			}
		}
	}
	declare_war_with_wargoal = {
		war_goal = $war_goal$
		province = $province$
		target = $target$
	}

	random_current_war = {
		limit = {
			any_war_participant = { THIS = scope:instigator }
			any_war_participant = { THIS = $target$ }
			is_war_leader = scope:instigator
			is_war_leader = $target$
		}
		save_scope_as = current_war_scope
	}

	every_subject = {
		limit = {
			OR = {
				is_subject_type = client_colony
				is_subject_type = autonomous_colony
				is_subject_type = autonomous_governorship
				is_subject_type = semi_autonomous_governorship
				is_subject_type = subsidiary_ally
				is_subject_type = feudatory
				is_subject_type = territory
			}
		}
		add_to_war = {
			target = scope:current_war_scope
			attacker = yes
			leader = no
		} 
	}
	# Consider an effect for removing great power allies from wars targeting minor countries

	if = {
		limit = {
			always = no # Disabled for now, as this immediately ends the war
			has_local_variable = tributary_was_released
		}
		scope:overlord_to_reinstate = {
			make_subject = {
				target = scope:vassal_to_remove
				type = tributary
			}
		}
	}
}

FUNC_make_subject = {
	# Scope: Country
	# Function: Replacer for vanilla make_subject, with bells and whistles
	$overlord$ = {
		make_subject = {
			target = $target$
			type = $type$
		}
	}
	
	$overlord$ = {
		change_color_effect = { color = color }
	}
	
}

FUNC_set_conquered_by = {
	# Scope: Province
	# Function: Replacer for vanilla set_conquered_by, ignores uninhabitable provinces
	# Also ignores provinces already owned by $grantee$
	if = {
		limit = {
			is_uninhabitable = no
			trigger_if = {
				limit = {
					has_owner = yes
				}
				NOT = {
					owner = $grantee$
				}
			}
		}
		set_conquered_by = $grantee$
	}
}