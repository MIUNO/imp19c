MANUFACTURE_convert_resource = {
	# Scope: Governorship
	# Function: Convert one resource into a different manufactured resource, scaled to the amount of resource available
}

MANUFACTURE_combine_resources = {
	# Scope: Governorship
	# Function: Combine between 2 resources, that must all be available to work, to make a different manufactured resource
	# Only actually reduce the stockpile sizes if all necessary resources are available

	# This effect is called twice, with a different effect each time, first time to generate demand then second time to consume and produce the output

	# Phase 1: Generate demand
	if = {
		limit = {
			var:INDUSTRY_factories_assigned_$output$ > 0
		}
		if = {
			limit = {
				NOT = {
					has_variable = $output$_industry_demand_calculated
				}
			}
			# Scale to the size of the industry in this governorship
			set_variable = {
				name = actual_input_1_amt
				value = $input_1_amt$
			}
			change_variable = {
				name = actual_input_1_amt
				multiply = var:INDUSTRY_factories_assigned_$output$
			}
			set_variable = {
				name = actual_input_2_amt
				value = $input_2_amt$
			}
			change_variable = {
				name = actual_input_2_amt
				multiply = var:INDUSTRY_factories_assigned_$output$
			}
			set_variable = {
				name = actual_output_amt
				value = $output_amt$
			}
			change_variable = {
				name = actual_output_amt
				multiply = var:INDUSTRY_factories_assigned_$output$
			}

			# Update demand
			change_variable = {
				name = DEMAND_from_industry_$input_1$
				add = var:actual_input_1_amt
			}
			change_variable = {
				name = DEMAND_from_$output$_industry_$input_1$
				add = var:actual_input_1_amt
			}
			change_variable = {
				name = DEMAND_from_industry_$input_2$
				add = var:actual_input_2_amt
			}
			change_variable = {
				name = DEMAND_from_$output$_industry_$input_2$
				add = var:actual_input_2_amt
			}

			set_variable = $output$_industry_demand_calculated
		}
		# Phase 2: Manufacture
		else = {
			MANUFACTURE_consume_required_combined_resources = {
				input_1 = $input_1$
				input_1_amt = var:actual_input_1_amt
				input_2 = $input_2$
				input_2_amt = var:actual_input_2_amt
				output = $output$
				output_amt = var:actual_output_amt
			}
			remove_variable = $output$_industry_demand_calculated
		}
	}

}

MANUFACTURE_consume_required_combined_resources = {
	if = { # Only proceed if both resources are available here
		limit = {
			var:$input_1$_stockpile > 0
			var:$input_2$_stockpile > 0
		}
		remove_variable = $output$_industry_has_no_$input_1$
		remove_variable = $output$_industry_has_no_$input_2$
		# Consume from the stockpiles
		set_variable = {
			name = industry_production_$output$
			value = $output_amt$
		}
		if = {
			limit = {
				OR = {
					var:input_availability_$input_1$ < 1
					var:input_availability_$input_2$ < 1
				}
			}
			set_local_variable = {
				name = average_production_efficiency
				value = var:input_availability_$input_1$
			}
			change_local_variable = {
				name = average_production_efficiency
				add = var:input_availability_$input_2$
			}
			change_local_variable = {
				name = average_production_efficiency
				multiply = 0.5
			}
			change_variable = {
				name = industry_production_$output$
				multiply = local_var:average_production_efficiency
			}

			set_local_variable = {
				name = $input_1$_used
				value = $input_1_amt$
			}
			change_local_variable = {
				name = $input_1$_used
				multiply = var:input_availability_$input_1$
			}
			set_local_variable = {
				name = $input_2$_used
				value = $input_2_amt$
			}
			change_local_variable = {
				name = $input_2$_used
				multiply = var:input_availability_$input_2$
			}
			change_variable = {
				name = $input_1$_stockpile
				subtract = local_var:$input_1$_used
			}
			change_variable = {
				name = $input_2$_stockpile
				subtract = local_var:$input_2$_used
			}
		}
		change_variable = {
			name = $output$_stockpile
			add = var:industry_production_$output$
		}
	}
	else = {
		if = {
			limit = {
				var:$input_1$_stockpile = 0
			}
			set_variable = $output$_industry_has_no_$input_1$
		}
		if = {
			limit = {
				var:$input_2$_stockpile = 0
			}
			set_variable = $output$_industry_has_no_$input_2$
		}
	}
}

MANUFACTURE_reset_demand_from_industry = {
	# Scope: governorship
	# Function: Set the demand from every industry for the given tradegood to 0, so that it can be recalculated when manufacturing takes place
	# Generic
	set_variable = {
		name = DEMAND_from_industry_$tradegood$
		value = 0
	}
	# Specific industries
	set_variable = {
		name = DEMAND_from_glass_industry_$tradegood$
		value = 0
	}
}

MANUFACTURE_reset_all_tradegood_demand = {
	every_tradegood_complex = {
		APPLY = MANUFACTURE_reset_demand_from_industry
	}
}

MANUFACTURE_all = {
	MANUFACTURE_glass = yes
}

MANUFACTURE_get_all_input_availability = {
	# Scope: Governorship
	# Function: Get the % of each resource available for all industries, which will be used to multiply down efficiency when all industries use up available resources simultaneously
	every_tradegood_complex = {
		APPLY = MANUFACTURE_get_input_availability
	}
}

MANUFACTURE_get_input_availability = { # Should fire AFTER CONSUMER GOODS CONSUMPTION so that consumer usage is prioritised
	set_variable = {
		name = input_availability_$tradegood$
		value = var:$tradegood$_stockpile
	}
	if = {
		limit = {
			var:$tradegood$_stockpile > 0
			has_variable = DEMAND_from_industry_$tradegood$
		}
		change_variable = {
			name = input_availability_$tradegood$
			divide = var:DEMAND_from_industry_$tradegood$
		}
	}
	if = {
		limit = {
			var:input_availability_$tradegood$ > 1
		}
		set_variable = {
			name = input_availability_$tradegood$
			value = 1
		}
	}
}

MANUFACTURE_glass = {
	# Scope: Governorship
	# Function: Increase the glass stockpile according to the availability of resources in the glass recipe
	# Called: At game start, then every quarter after trade, by the master MANUFACTURE effect
		MANUFACTURE_combine_resources = {
			input_1 = coal
			input_1_amt = 1

			input_2 = inorganic_compounds
			input_2_amt = 1

			output = glass
			output_amt = 2
		}
	}
}

MANUFACTURE_produce_tradegood = {
	# Scope: Governorship
	# Function: Produce the given resource, based on already calculated input demands
	# Applied by every_tradegood_complex


}