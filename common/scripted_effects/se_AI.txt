## AI Behaviour scripts

# DIPLOMACY

### Testing commands (for use in explorer)

### Behaviour script

#### WAR

AI_pick_war_target = {
	# Scope: Country
	# Function: Pick the country which the AI is most likely to declare war on

	#random_country = {
	#	weight = {
#
#			modifier = {
#
#			}
#
#		}
#	}
}

#### DIPLOMATIC REASONING
# Mark out rivals
# There are different types of rivals depending on the balance of power
# The greater a country's power rating, the more rivals it can have

# RIVAL TYPES:
# Oppose - country should confront this rival head-on as a fight between equals
# Fear - country should seek the help of stronger nations against this rival 
# Domineer - Country should subsume this rival into their empire or sphere of influence
# Subvert - Country should knock down this rival's power

AI_add_rival = {

}

#### DIPLOMATIC INTEREST
# Mark areas as "interests" to control

AI_add_control_interest_all_countries_limited = {
	# Scope: Any
	# Function: Generate diplomatic interests for all countries above the threshhold
	# Normally, diplomatic interests should be generated ad-hoc for countries rather than all at once
	# Especially as this is a relatively demanding script in terms of performance
	every_country = {
		limit = {
			DIPLOMACY_power > AI_diplomacy_interest_cutoff_threshhold
		}
		AI_add_control_interest = yes
	}
}

AI_add_control_interest = {
	# Scope: Country
	# Function: Pick an area to mark as an interest and add it to the list in country scope
	# AI interests are areas that the AI will focus on accessing diplomatically
	# Methods of control include controlling the land directly or through a subject
	# TODO: Store a list of recently "blocked" interests, where the AI has either satisfied its goal or has been stopped and will look to try elsewhere
	#
	# Notes:
	# AI countries without interests as defined here will pick activities based on a much simpler decision tree based
	# e.g. "control pops of my culture and religion", or "control claims"
	# Local powers will also react to plays in their TZ differently, acting more protectively.

	save_scope_as = AI_root

	ordered_area = {
		limit = {

			NOT = { THIS = area:spare_state }
			# Limits based on any area in the province
			any_area_province = {

				# Must have land not owned by AI_root or its vassals
				NOT = { owner = scope:AI_root }
				trigger_if = {
					limit = {
						scope:AI_root = {
							is_subject = yes
						}
					}
					NOT = { owner.overlord = scope:AI_root }
				}

				# Adjacency required if AI_root is landlocked
				trigger_if = {
					limit = {
						scope:AI_root = {
							NOT = {
								any_owned_province = {
									is_coastal = yes
								}
							}
						}
					}
					any_neighbor_province = {
						owner = scope:AI_root
					}
				}

				# Only select coastal areas for overseas interests
				trigger_if = {
					limit = {
						NOT = {
							any_neighbor_province = {
								owner = scope:AI_root
							}
						}
					}
					is_coastal = yes
				}
				
			}
		}
		order_by = {
			value = {
				# Begin order_by value

				# BEGIN Values from provinces
				every_area_province = {
					limit = {
						trigger_if = {
							limit = {
								has_owner = yes
							}
							NOT = { owner = scope:AI_root }
							NOT = { owner.overlord = scope:AI_root }
						}
					}
					# BEGIN FROM POPS
					add = {
						every_pops_in_province = {
							# Same religion
							if = {
								limit = {
									THIS.religion = scope:AI_root.religion
								}
								add = {
									value = scope:AI_root.SPIRIT_piety
									multiply = 2
								}
							}
							# Same culture
							if = {
								limit = {
									THIS.culture = scope:AI_root.country_culture.culture
								}
								add = scope:AI_root.SPIRIT_nationalism
								multiply = 4
							}
							# Similar culture
							else_if = {
								limit = {
									THIS.culture_group = scope:AI_root.culture.culture_group
								}
								add = {
									value = scope:AI_root.SPIRIT_nationalism
									multiply = 2
								}
							}
						}
						multiply = 5
					}
					
					# END FROM POPS
					if = {
						limit = {
							has_owner = yes
						}
						if = {
							limit = {
								owner.religion = scope:AI_root.religion
							}
							subtract = scope:AI_root.SPIRIT_piety
						}
						if = {
							limit = {
								owner.culture = scope:AI_root.culture
							}
							subtract = scope:AI_root.SPIRIT_nationalism
						}
						else_if = {
							limit = {
								owner.culture_group = scope:AI_root.culture_group
							}
							subtract = {
								value = scope:AI_root.SPIRIT_nationalism
								divide = 2
							}
						}
					}
					# Tradegood desirability
					# TODO: Balance the weighting, as expensive goods are far too preferred, owning them as a small country would basically be a death wish
					# Maybe get square root of tradegood price to diminish the distribution of prices in this calculation
					# Or a little weighting from the actual num goods produced
					# Alternatively, from the total possible building slots or population cap?
					add = AI_interest_weighting_from_tradegood
					# Add how much population the province can support
					# TODO: This is not working as intended, it should be higher for terrains that can support more pops
					# Encouraged to predate on low industrialisation provinces
					subtract = {
						value = civilization_value
						multiply = 20
					}
					# Discouraged coveting overlord's territory
					if = {
						limit = {
							has_owner = yes
						}
						if = {
							limit = {
								owner = scope:AI_root.overlord
							}
							subtract = 1000
						}
					}
					# Add value from intrinsic shipping modifiers (instead of adding raw shipping power, because AI interest is more about the potential of an area than its current value)
					if = {
						limit = {
							has_variable = natural_harbour
						}
						add = {
							value = SHIPPING_natural_harbour_bonus
							multiply = 10
						}
					}
					if = {
						limit = {
							has_variable = major_estuary
						}
						add = {
							value = SHIPPING_major_estuary_bonus
							multiply = 10
						}
					}
					if = {
						limit = {
							has_variable = trade_chokepoint
						}
						add = {
							value = SHIPPING_trade_chokepoint_bonus
							multiply = 10
						}
					}
					if = {
						limit = {
							has_minor_river = yes
						}
						add = {
							value = SHIPPING_river_or_coast_bonus
							multiply = 10
						}
					}
					# Discourage coveting allies' territory
					if = {
						if = {
							limit = {
								has_owner = yes
							}
							limit = {
								owner = {
									alliance_with = scope:AI_root
								}
							}
							subtract = 250
						}
					}
					# Triple the entire province score if this province is a claim of the AI_root
					if = {
						limit = {
							is_core_of = scope:AI_root
						}
						multiply = 3
					}
				}
				# END provinces loop
				# Boost the score per province
				multiply = 5
				# Turn this into an average province value for the area, so the bias is not towards purely larger areas
				divide = {
					every_area_province = {
						limit = {
							trigger_if = {
								limit = {
									has_owner = yes
								}
								NOT = { owner = scope:AI_root }
								NOT = { owner.overlord = scope:AI_root }
							}
						}
						add = 1
					}
					min = 1
				}
				# END Values from provinces

				# From neighbouring areas if port ratio is low
				if = {
					limit = {
						any_area_province = {
							any_neighbor_province = {
								OR = {
									owner = scope:AI_root
									owner = { is_subject_of = scope:AI_root }
								}
							}
						}
					}
					divide = AI_ports_to_land_ratio
				}
				
				# From AI_root's DIPLOMACY_power in the area's TZ
				add = AI_diplomacy_interest_from_tradezone_diplomacy_power_scope_ai_root
				 
				# Add weight if AI_root is not a major player in the TZ, but it aspires to be.
				# End order_by value
			}
		}

		#max = {
		#	value = scope:AI_root.DIPLOMACY_power
		#	divide = AI_diplomacy_interest_cutoff_threshhold
		#	round = floor
		#}
		# DEBUG: Currently only sets 1 for all countries so that the first priority area shows up in the tooltip
		# TODO: Implement a list somewhere in GUI so the full list can be inspected for debugging
		max = 1

		

		# Currently here for testing - this is so that the tooltip can grab province area by scoping to a state
		random_area_province = {
			save_scope_as = AI_interest_target
		}

		scope:AI_root = {
			add_to_variable_list = {
				name = AI_interests_list
				target = scope:AI_interest_target
			}
		}
		
	}

	# TESTING PURPOSES ONLY - Saves just 1 interest var
	set_variable = {
		name = AI_interest
		value = scope:AI_interest_target
	}

}

AI_begin_diplomatic_play = {
	# Scope: Country
	# Function: Begin a diplomatic play in an interest
	# Activities may be aimed at the area in general with no particular diplomatic target
	# OR
	# If multiple countries own territory in the area, the AI_root is most likely to engage diplomatically with the country which owns the most valuable province 
	# Province value = (tradegood output x tradegood value) + shipping power

	# Diplomatic plays may range from requesting a treaty for access to an area
	# To outright wars of conquest or espionage missions to subvert control of a rival

	# The play may range from controlling the area, to the whole region, to possibly the whole of a country which controls that area, depending on the relative strength of that country. For example, if a relatively low power country controls an area, the AI_root may target that entire control for control.

	# We begin by creating a provobj
	random_province = {
		limit = {
			NOT = {
				has_variable = is_diplomatic_play # We don't want to overwrite an existing object with this, so be sure to pick an unused province
			}
		}
		set_variable = is_diplomatic_play
		save_scope_as = diplomatic_play

		set_variable = {
			name = play_instigator
			value = $play_instigator$ # Must be a country.
		}
		set_variable = {
			name = play_target_area
			value = $play_target_area$ # Must be an area.
		}

		# Countries supporting the play on either side
		add_to_variable_list = {
			name = play_supporters_instigator
			value = $play_instigator$
		}

		# Empty list for play_supporters_list
	}
}

AI_assess_all_adversaries = {
	# Scope: Province (AI interest)
	# Function: Get all the adversaries in an area and assess them using AI_assess_adversary

	every_in_list = {
		list = adversaries_to_assess
		remove_from_list = adversaries_to_assess
	}
	
	THIS.area = {
		every_area_province = {
			limit = {
				has_owner = yes
				trigger_if = {
					limit = {
						has_owner = yes
					}
					owner = {
						NOT = {
							is_in_list = adversaries_to_assess
						}
					}
				}
			}
			owner = {
				add_to_list = adversaries_to_assess
			}
		}
	}

	every_in_list = {
		list = adversaries_to_assess

		save_scope_as = AI_assess_target

		AI_assess_adversary = {
			AI_target = scope:AI_assess_target
		}
	}
}

AI_assess_adversary = {
	# Scope: Country
	# Function: Assess the $AI_target$ country from the perspective of AI_root
	# This helps the AI determine whether it should:
	# - Try to annex the target (holds core land and is small)
	# - Try to vassalise the target (is small)
	# - Try to vassalise the target and move on to others (is tiny)
	# - Try to take land directly from the target (is big and holds core land)
	# - Try to give land to an ally or new vassal (is big and holds non-core land)

	# Also essential for determining diplomatic parity (i.e. comparing diplomatic power scores)
	# Diplomatic parity determines how much pressure root can put on target
	# Or if parity is imbalanaced, root will seek more support before putting pressure on
	# This gives the root a pressure "budget" which it can spend on triggering actions in script
	# Some actions "cost" less pressure to do and will therefore be more attractive to countries that are more on-par, or where root is less powerful than target

	# Target can also seek support to gain power, but only in subsequent stages of a diplomatic play, where assessments are repeated but by both sides of the play.

	# If both sides have a very high diplomatic power

	#######################
	# Get own target Diplomatic power
	set_local_variable = {
		name = AI_root_power
		value = {
			value = scope:AI_root.DIPLOMACY_power
			scope:AI_root = {
				every_allied_country = {
					# Add less if allied with the target
					if = {
						limit = {
							scope:AI_target = {
								any_allied_country = PREV
							}
						}
						add = {
							value = THIS.DIPLOMACY_power
							multiply = 0.2
						}
					}
					else = {
						add = {
							value = THIS.DIPLOMACY_power
							multiply = 0.5
						}
					}
				}
			}
		}
	}

	# Get target's Diplomatic power
	# Plus power of their allies
	set_local_variable = {
		name = AI_target_power
		value = {
			value = scope:AI_target.DIPLOMACY_power
			scope:AI_target = {
				every_allied_country = {
					# Add less if allied with the target
					if = {
						limit = {
							scope:AI_root = {
								any_allied_country = PREV
							}
						}
						add = {
							value = THIS.DIPLOMACY_power
							multiply = 0.3
						}
					}
					else = {
						add = {
							value = THIS.DIPLOMACY_power
							multiply = 0.5
						}
					}
				}
			}
		}
	}
	#
}



# ECONOMY

## CURRENCY
### Take out debt

## TAXES
### Change tax rates

# CONSTRUCTION

### Build buildings, as the government